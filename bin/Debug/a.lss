
bin\Debug\a.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001fe  00800100  00001b14  00001ba8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .fuse         00000003  00820000  00820000  00001da6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .debug_aranges 000001c0  00000000  00000000  00001da9  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000031f  00000000  00000000  00001f69  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002b7e  00000000  00000000  00002288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000015ac  00000000  00000000  00004e06  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001a22  00000000  00000000  000063b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002d0  00000000  00000000  00007dd4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004bc  00000000  00000000  000080a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000009ce  00000000  00000000  00008560  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00008f2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
       c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
      64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e4 e1       	ldi	r30, 0x14	; 20
      7c:	fb e1       	ldi	r31, 0x1B	; 27
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	ae 3f       	cpi	r26, 0xFE	; 254
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>
      8a:	0e 94 8d 05 	call	0xb1a	; 0xb1a <main>
      8e:	0c 94 88 0d 	jmp	0x1b10	; 0x1b10 <_exit>

00000092 <__bad_interrupt>:
      92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <I2C_Init>:
    {0x00,0x36,0x36,0x00,0x00}, // :
    {0x23,0x13,0x08,0x64,0x62}, // %
    {0x06,0x09,0x09,0x06,0x00}  // ° (degree symbol)
};

void I2C_Init() {
      96:	df 93       	push	r29
      98:	cf 93       	push	r28
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
    TWSR = 0;
      9e:	e9 eb       	ldi	r30, 0xB9	; 185
      a0:	f0 e0       	ldi	r31, 0x00	; 0
      a2:	10 82       	st	Z, r1
    TWBR = 0x48;
      a4:	e8 eb       	ldi	r30, 0xB8	; 184
      a6:	f0 e0       	ldi	r31, 0x00	; 0
      a8:	88 e4       	ldi	r24, 0x48	; 72
      aa:	80 83       	st	Z, r24
}
      ac:	cf 91       	pop	r28
      ae:	df 91       	pop	r29
      b0:	08 95       	ret

000000b2 <I2C_Start>:

void I2C_Start() {
      b2:	df 93       	push	r29
      b4:	cf 93       	push	r28
      b6:	cd b7       	in	r28, 0x3d	; 61
      b8:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
      ba:	ec eb       	ldi	r30, 0xBC	; 188
      bc:	f0 e0       	ldi	r31, 0x00	; 0
      be:	84 ea       	ldi	r24, 0xA4	; 164
      c0:	80 83       	st	Z, r24
    while (!(TWCR & (1<<TWINT)));
      c2:	ec eb       	ldi	r30, 0xBC	; 188
      c4:	f0 e0       	ldi	r31, 0x00	; 0
      c6:	80 81       	ld	r24, Z
      c8:	88 23       	and	r24, r24
      ca:	dc f7       	brge	.-10     	; 0xc2 <I2C_Start+0x10>
}
      cc:	cf 91       	pop	r28
      ce:	df 91       	pop	r29
      d0:	08 95       	ret

000000d2 <I2C_Stop>:

void I2C_Stop() {
      d2:	df 93       	push	r29
      d4:	cf 93       	push	r28
      d6:	cd b7       	in	r28, 0x3d	; 61
      d8:	de b7       	in	r29, 0x3e	; 62
      da:	68 97       	sbiw	r28, 0x18	; 24
      dc:	0f b6       	in	r0, 0x3f	; 63
      de:	f8 94       	cli
      e0:	de bf       	out	0x3e, r29	; 62
      e2:	0f be       	out	0x3f, r0	; 63
      e4:	cd bf       	out	0x3d, r28	; 61
    TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
      e6:	ec eb       	ldi	r30, 0xBC	; 188
      e8:	f0 e0       	ldi	r31, 0x00	; 0
      ea:	84 e9       	ldi	r24, 0x94	; 148
      ec:	80 83       	st	Z, r24
      ee:	80 e0       	ldi	r24, 0x00	; 0
      f0:	90 e0       	ldi	r25, 0x00	; 0
      f2:	a8 ec       	ldi	r26, 0xC8	; 200
      f4:	b2 e4       	ldi	r27, 0x42	; 66
      f6:	8d 8b       	std	Y+21, r24	; 0x15
      f8:	9e 8b       	std	Y+22, r25	; 0x16
      fa:	af 8b       	std	Y+23, r26	; 0x17
      fc:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
      fe:	6d 89       	ldd	r22, Y+21	; 0x15
     100:	7e 89       	ldd	r23, Y+22	; 0x16
     102:	8f 89       	ldd	r24, Y+23	; 0x17
     104:	98 8d       	ldd	r25, Y+24	; 0x18
     106:	2b ea       	ldi	r18, 0xAB	; 171
     108:	3a ea       	ldi	r19, 0xAA	; 170
     10a:	4a ea       	ldi	r20, 0xAA	; 170
     10c:	50 e4       	ldi	r21, 0x40	; 64
     10e:	0e 94 2f 08 	call	0x105e	; 0x105e <__mulsf3>
     112:	dc 01       	movw	r26, r24
     114:	cb 01       	movw	r24, r22
     116:	89 8b       	std	Y+17, r24	; 0x11
     118:	9a 8b       	std	Y+18, r25	; 0x12
     11a:	ab 8b       	std	Y+19, r26	; 0x13
     11c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     11e:	69 89       	ldd	r22, Y+17	; 0x11
     120:	7a 89       	ldd	r23, Y+18	; 0x12
     122:	8b 89       	ldd	r24, Y+19	; 0x13
     124:	9c 89       	ldd	r25, Y+20	; 0x14
     126:	20 e0       	ldi	r18, 0x00	; 0
     128:	30 e0       	ldi	r19, 0x00	; 0
     12a:	40 e8       	ldi	r20, 0x80	; 128
     12c:	5f e3       	ldi	r21, 0x3F	; 63
     12e:	0e 94 35 0a 	call	0x146a	; 0x146a <__ltsf2>
     132:	88 23       	and	r24, r24
     134:	1c f4       	brge	.+6      	; 0x13c <I2C_Stop+0x6a>
		__ticks = 1;
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	88 8b       	std	Y+16, r24	; 0x10
     13a:	91 c0       	rjmp	.+290    	; 0x25e <I2C_Stop+0x18c>
	else if (__tmp > 255)
     13c:	69 89       	ldd	r22, Y+17	; 0x11
     13e:	7a 89       	ldd	r23, Y+18	; 0x12
     140:	8b 89       	ldd	r24, Y+19	; 0x13
     142:	9c 89       	ldd	r25, Y+20	; 0x14
     144:	20 e0       	ldi	r18, 0x00	; 0
     146:	30 e0       	ldi	r19, 0x00	; 0
     148:	4f e7       	ldi	r20, 0x7F	; 127
     14a:	53 e4       	ldi	r21, 0x43	; 67
     14c:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__gtsf2>
     150:	18 16       	cp	r1, r24
     152:	0c f0       	brlt	.+2      	; 0x156 <I2C_Stop+0x84>
     154:	7b c0       	rjmp	.+246    	; 0x24c <I2C_Stop+0x17a>
	{
		_delay_ms(__us / 1000.0);
     156:	6d 89       	ldd	r22, Y+21	; 0x15
     158:	7e 89       	ldd	r23, Y+22	; 0x16
     15a:	8f 89       	ldd	r24, Y+23	; 0x17
     15c:	98 8d       	ldd	r25, Y+24	; 0x18
     15e:	20 e0       	ldi	r18, 0x00	; 0
     160:	30 e0       	ldi	r19, 0x00	; 0
     162:	4a e7       	ldi	r20, 0x7A	; 122
     164:	54 e4       	ldi	r21, 0x44	; 68
     166:	0e 94 29 09 	call	0x1252	; 0x1252 <__divsf3>
     16a:	dc 01       	movw	r26, r24
     16c:	cb 01       	movw	r24, r22
     16e:	8c 87       	std	Y+12, r24	; 0x0c
     170:	9d 87       	std	Y+13, r25	; 0x0d
     172:	ae 87       	std	Y+14, r26	; 0x0e
     174:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     176:	6c 85       	ldd	r22, Y+12	; 0x0c
     178:	7d 85       	ldd	r23, Y+13	; 0x0d
     17a:	8e 85       	ldd	r24, Y+14	; 0x0e
     17c:	9f 85       	ldd	r25, Y+15	; 0x0f
     17e:	20 e0       	ldi	r18, 0x00	; 0
     180:	30 e0       	ldi	r19, 0x00	; 0
     182:	4a e7       	ldi	r20, 0x7A	; 122
     184:	55 e4       	ldi	r21, 0x45	; 69
     186:	0e 94 2f 08 	call	0x105e	; 0x105e <__mulsf3>
     18a:	dc 01       	movw	r26, r24
     18c:	cb 01       	movw	r24, r22
     18e:	88 87       	std	Y+8, r24	; 0x08
     190:	99 87       	std	Y+9, r25	; 0x09
     192:	aa 87       	std	Y+10, r26	; 0x0a
     194:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     196:	68 85       	ldd	r22, Y+8	; 0x08
     198:	79 85       	ldd	r23, Y+9	; 0x09
     19a:	8a 85       	ldd	r24, Y+10	; 0x0a
     19c:	9b 85       	ldd	r25, Y+11	; 0x0b
     19e:	20 e0       	ldi	r18, 0x00	; 0
     1a0:	30 e0       	ldi	r19, 0x00	; 0
     1a2:	40 e8       	ldi	r20, 0x80	; 128
     1a4:	5f e3       	ldi	r21, 0x3F	; 63
     1a6:	0e 94 35 0a 	call	0x146a	; 0x146a <__ltsf2>
     1aa:	88 23       	and	r24, r24
     1ac:	2c f4       	brge	.+10     	; 0x1b8 <I2C_Stop+0xe6>
		__ticks = 1;
     1ae:	81 e0       	ldi	r24, 0x01	; 1
     1b0:	90 e0       	ldi	r25, 0x00	; 0
     1b2:	9f 83       	std	Y+7, r25	; 0x07
     1b4:	8e 83       	std	Y+6, r24	; 0x06
     1b6:	3f c0       	rjmp	.+126    	; 0x236 <I2C_Stop+0x164>
	else if (__tmp > 65535)
     1b8:	68 85       	ldd	r22, Y+8	; 0x08
     1ba:	79 85       	ldd	r23, Y+9	; 0x09
     1bc:	8a 85       	ldd	r24, Y+10	; 0x0a
     1be:	9b 85       	ldd	r25, Y+11	; 0x0b
     1c0:	20 e0       	ldi	r18, 0x00	; 0
     1c2:	3f ef       	ldi	r19, 0xFF	; 255
     1c4:	4f e7       	ldi	r20, 0x7F	; 127
     1c6:	57 e4       	ldi	r21, 0x47	; 71
     1c8:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__gtsf2>
     1cc:	18 16       	cp	r1, r24
     1ce:	4c f5       	brge	.+82     	; 0x222 <I2C_Stop+0x150>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     1d0:	6c 85       	ldd	r22, Y+12	; 0x0c
     1d2:	7d 85       	ldd	r23, Y+13	; 0x0d
     1d4:	8e 85       	ldd	r24, Y+14	; 0x0e
     1d6:	9f 85       	ldd	r25, Y+15	; 0x0f
     1d8:	20 e0       	ldi	r18, 0x00	; 0
     1da:	30 e0       	ldi	r19, 0x00	; 0
     1dc:	40 e2       	ldi	r20, 0x20	; 32
     1de:	51 e4       	ldi	r21, 0x41	; 65
     1e0:	0e 94 2f 08 	call	0x105e	; 0x105e <__mulsf3>
     1e4:	dc 01       	movw	r26, r24
     1e6:	cb 01       	movw	r24, r22
     1e8:	bc 01       	movw	r22, r24
     1ea:	cd 01       	movw	r24, r26
     1ec:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fixunssfsi>
     1f0:	dc 01       	movw	r26, r24
     1f2:	cb 01       	movw	r24, r22
     1f4:	9f 83       	std	Y+7, r25	; 0x07
     1f6:	8e 83       	std	Y+6, r24	; 0x06
     1f8:	0f c0       	rjmp	.+30     	; 0x218 <I2C_Stop+0x146>
     1fa:	80 e9       	ldi	r24, 0x90	; 144
     1fc:	91 e0       	ldi	r25, 0x01	; 1
     1fe:	9d 83       	std	Y+5, r25	; 0x05
     200:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     202:	8c 81       	ldd	r24, Y+4	; 0x04
     204:	9d 81       	ldd	r25, Y+5	; 0x05
     206:	01 97       	sbiw	r24, 0x01	; 1
     208:	f1 f7       	brne	.-4      	; 0x206 <I2C_Stop+0x134>
     20a:	9d 83       	std	Y+5, r25	; 0x05
     20c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     20e:	8e 81       	ldd	r24, Y+6	; 0x06
     210:	9f 81       	ldd	r25, Y+7	; 0x07
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	9f 83       	std	Y+7, r25	; 0x07
     216:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     218:	8e 81       	ldd	r24, Y+6	; 0x06
     21a:	9f 81       	ldd	r25, Y+7	; 0x07
     21c:	00 97       	sbiw	r24, 0x00	; 0
     21e:	69 f7       	brne	.-38     	; 0x1fa <I2C_Stop+0x128>
     220:	24 c0       	rjmp	.+72     	; 0x26a <I2C_Stop+0x198>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     222:	68 85       	ldd	r22, Y+8	; 0x08
     224:	79 85       	ldd	r23, Y+9	; 0x09
     226:	8a 85       	ldd	r24, Y+10	; 0x0a
     228:	9b 85       	ldd	r25, Y+11	; 0x0b
     22a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fixunssfsi>
     22e:	dc 01       	movw	r26, r24
     230:	cb 01       	movw	r24, r22
     232:	9f 83       	std	Y+7, r25	; 0x07
     234:	8e 83       	std	Y+6, r24	; 0x06
     236:	8e 81       	ldd	r24, Y+6	; 0x06
     238:	9f 81       	ldd	r25, Y+7	; 0x07
     23a:	9b 83       	std	Y+3, r25	; 0x03
     23c:	8a 83       	std	Y+2, r24	; 0x02
     23e:	8a 81       	ldd	r24, Y+2	; 0x02
     240:	9b 81       	ldd	r25, Y+3	; 0x03
     242:	01 97       	sbiw	r24, 0x01	; 1
     244:	f1 f7       	brne	.-4      	; 0x242 <I2C_Stop+0x170>
     246:	9b 83       	std	Y+3, r25	; 0x03
     248:	8a 83       	std	Y+2, r24	; 0x02
     24a:	0f c0       	rjmp	.+30     	; 0x26a <I2C_Stop+0x198>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     24c:	69 89       	ldd	r22, Y+17	; 0x11
     24e:	7a 89       	ldd	r23, Y+18	; 0x12
     250:	8b 89       	ldd	r24, Y+19	; 0x13
     252:	9c 89       	ldd	r25, Y+20	; 0x14
     254:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fixunssfsi>
     258:	dc 01       	movw	r26, r24
     25a:	cb 01       	movw	r24, r22
     25c:	88 8b       	std	Y+16, r24	; 0x10
     25e:	88 89       	ldd	r24, Y+16	; 0x10
     260:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     262:	89 81       	ldd	r24, Y+1	; 0x01
     264:	8a 95       	dec	r24
     266:	f1 f7       	brne	.-4      	; 0x264 <I2C_Stop+0x192>
     268:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(100);
}
     26a:	68 96       	adiw	r28, 0x18	; 24
     26c:	0f b6       	in	r0, 0x3f	; 63
     26e:	f8 94       	cli
     270:	de bf       	out	0x3e, r29	; 62
     272:	0f be       	out	0x3f, r0	; 63
     274:	cd bf       	out	0x3d, r28	; 61
     276:	cf 91       	pop	r28
     278:	df 91       	pop	r29
     27a:	08 95       	ret

0000027c <I2C_Write>:

void I2C_Write(uint8_t data) {
     27c:	df 93       	push	r29
     27e:	cf 93       	push	r28
     280:	0f 92       	push	r0
     282:	cd b7       	in	r28, 0x3d	; 61
     284:	de b7       	in	r29, 0x3e	; 62
     286:	89 83       	std	Y+1, r24	; 0x01
    TWDR = data;
     288:	eb eb       	ldi	r30, 0xBB	; 187
     28a:	f0 e0       	ldi	r31, 0x00	; 0
     28c:	89 81       	ldd	r24, Y+1	; 0x01
     28e:	80 83       	st	Z, r24
    TWCR = (1<<TWINT)|(1<<TWEN);
     290:	ec eb       	ldi	r30, 0xBC	; 188
     292:	f0 e0       	ldi	r31, 0x00	; 0
     294:	84 e8       	ldi	r24, 0x84	; 132
     296:	80 83       	st	Z, r24
    while (!(TWCR & (1<<TWINT)));
     298:	ec eb       	ldi	r30, 0xBC	; 188
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	80 81       	ld	r24, Z
     29e:	88 23       	and	r24, r24
     2a0:	dc f7       	brge	.-10     	; 0x298 <I2C_Write+0x1c>
}
     2a2:	0f 90       	pop	r0
     2a4:	cf 91       	pop	r28
     2a6:	df 91       	pop	r29
     2a8:	08 95       	ret

000002aa <I2C_Read_ACK>:

uint8_t I2C_Read_ACK() {
     2aa:	df 93       	push	r29
     2ac:	cf 93       	push	r28
     2ae:	cd b7       	in	r28, 0x3d	; 61
     2b0:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
     2b2:	ec eb       	ldi	r30, 0xBC	; 188
     2b4:	f0 e0       	ldi	r31, 0x00	; 0
     2b6:	84 ec       	ldi	r24, 0xC4	; 196
     2b8:	80 83       	st	Z, r24
    while (!(TWCR & (1<<TWINT)));
     2ba:	ec eb       	ldi	r30, 0xBC	; 188
     2bc:	f0 e0       	ldi	r31, 0x00	; 0
     2be:	80 81       	ld	r24, Z
     2c0:	88 23       	and	r24, r24
     2c2:	dc f7       	brge	.-10     	; 0x2ba <I2C_Read_ACK+0x10>
    return TWDR;
     2c4:	eb eb       	ldi	r30, 0xBB	; 187
     2c6:	f0 e0       	ldi	r31, 0x00	; 0
     2c8:	80 81       	ld	r24, Z
}
     2ca:	cf 91       	pop	r28
     2cc:	df 91       	pop	r29
     2ce:	08 95       	ret

000002d0 <I2C_Read_NACK>:

uint8_t I2C_Read_NACK() {
     2d0:	df 93       	push	r29
     2d2:	cf 93       	push	r28
     2d4:	cd b7       	in	r28, 0x3d	; 61
     2d6:	de b7       	in	r29, 0x3e	; 62
    TWCR = (1<<TWINT)|(1<<TWEN);
     2d8:	ec eb       	ldi	r30, 0xBC	; 188
     2da:	f0 e0       	ldi	r31, 0x00	; 0
     2dc:	84 e8       	ldi	r24, 0x84	; 132
     2de:	80 83       	st	Z, r24
    while (!(TWCR & (1<<TWINT)));
     2e0:	ec eb       	ldi	r30, 0xBC	; 188
     2e2:	f0 e0       	ldi	r31, 0x00	; 0
     2e4:	80 81       	ld	r24, Z
     2e6:	88 23       	and	r24, r24
     2e8:	dc f7       	brge	.-10     	; 0x2e0 <I2C_Read_NACK+0x10>
    return TWDR;
     2ea:	eb eb       	ldi	r30, 0xBB	; 187
     2ec:	f0 e0       	ldi	r31, 0x00	; 0
     2ee:	80 81       	ld	r24, Z
}
     2f0:	cf 91       	pop	r28
     2f2:	df 91       	pop	r29
     2f4:	08 95       	ret

000002f6 <OLED_Command>:

void OLED_Command(uint8_t cmd) {
     2f6:	df 93       	push	r29
     2f8:	cf 93       	push	r28
     2fa:	0f 92       	push	r0
     2fc:	cd b7       	in	r28, 0x3d	; 61
     2fe:	de b7       	in	r29, 0x3e	; 62
     300:	89 83       	std	Y+1, r24	; 0x01
    I2C_Start();
     302:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_Start>
    I2C_Write(OLED_ADDR);
     306:	88 e7       	ldi	r24, 0x78	; 120
     308:	0e 94 3e 01 	call	0x27c	; 0x27c <I2C_Write>
    I2C_Write(0x00);
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	0e 94 3e 01 	call	0x27c	; 0x27c <I2C_Write>
    I2C_Write(cmd);
     312:	89 81       	ldd	r24, Y+1	; 0x01
     314:	0e 94 3e 01 	call	0x27c	; 0x27c <I2C_Write>
    I2C_Stop();
     318:	0e 94 69 00 	call	0xd2	; 0xd2 <I2C_Stop>
}
     31c:	0f 90       	pop	r0
     31e:	cf 91       	pop	r28
     320:	df 91       	pop	r29
     322:	08 95       	ret

00000324 <OLED_Data>:

void OLED_Data(uint8_t data) {
     324:	df 93       	push	r29
     326:	cf 93       	push	r28
     328:	0f 92       	push	r0
     32a:	cd b7       	in	r28, 0x3d	; 61
     32c:	de b7       	in	r29, 0x3e	; 62
     32e:	89 83       	std	Y+1, r24	; 0x01
    I2C_Start();
     330:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_Start>
    I2C_Write(OLED_ADDR);
     334:	88 e7       	ldi	r24, 0x78	; 120
     336:	0e 94 3e 01 	call	0x27c	; 0x27c <I2C_Write>
    I2C_Write(0x40);
     33a:	80 e4       	ldi	r24, 0x40	; 64
     33c:	0e 94 3e 01 	call	0x27c	; 0x27c <I2C_Write>
    I2C_Write(data);
     340:	89 81       	ldd	r24, Y+1	; 0x01
     342:	0e 94 3e 01 	call	0x27c	; 0x27c <I2C_Write>
    I2C_Stop();
     346:	0e 94 69 00 	call	0xd2	; 0xd2 <I2C_Stop>
}
     34a:	0f 90       	pop	r0
     34c:	cf 91       	pop	r28
     34e:	df 91       	pop	r29
     350:	08 95       	ret

00000352 <OLED_Init>:

void OLED_Init() {
     352:	df 93       	push	r29
     354:	cf 93       	push	r28
     356:	cd b7       	in	r28, 0x3d	; 61
     358:	de b7       	in	r29, 0x3e	; 62
     35a:	eb 97       	sbiw	r28, 0x3b	; 59
     35c:	0f b6       	in	r0, 0x3f	; 63
     35e:	f8 94       	cli
     360:	de bf       	out	0x3e, r29	; 62
     362:	0f be       	out	0x3f, r0	; 63
     364:	cd bf       	out	0x3d, r28	; 61
     366:	80 e0       	ldi	r24, 0x00	; 0
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	a8 ec       	ldi	r26, 0xC8	; 200
     36c:	b2 e4       	ldi	r27, 0x42	; 66
     36e:	89 8f       	std	Y+25, r24	; 0x19
     370:	9a 8f       	std	Y+26, r25	; 0x1a
     372:	ab 8f       	std	Y+27, r26	; 0x1b
     374:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     376:	69 8d       	ldd	r22, Y+25	; 0x19
     378:	7a 8d       	ldd	r23, Y+26	; 0x1a
     37a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     37c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     37e:	20 e0       	ldi	r18, 0x00	; 0
     380:	30 e0       	ldi	r19, 0x00	; 0
     382:	4a e7       	ldi	r20, 0x7A	; 122
     384:	55 e4       	ldi	r21, 0x45	; 69
     386:	0e 94 2f 08 	call	0x105e	; 0x105e <__mulsf3>
     38a:	dc 01       	movw	r26, r24
     38c:	cb 01       	movw	r24, r22
     38e:	8d 8b       	std	Y+21, r24	; 0x15
     390:	9e 8b       	std	Y+22, r25	; 0x16
     392:	af 8b       	std	Y+23, r26	; 0x17
     394:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     396:	6d 89       	ldd	r22, Y+21	; 0x15
     398:	7e 89       	ldd	r23, Y+22	; 0x16
     39a:	8f 89       	ldd	r24, Y+23	; 0x17
     39c:	98 8d       	ldd	r25, Y+24	; 0x18
     39e:	20 e0       	ldi	r18, 0x00	; 0
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	40 e8       	ldi	r20, 0x80	; 128
     3a4:	5f e3       	ldi	r21, 0x3F	; 63
     3a6:	0e 94 35 0a 	call	0x146a	; 0x146a <__ltsf2>
     3aa:	88 23       	and	r24, r24
     3ac:	2c f4       	brge	.+10     	; 0x3b8 <OLED_Init+0x66>
		__ticks = 1;
     3ae:	81 e0       	ldi	r24, 0x01	; 1
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	9c 8b       	std	Y+20, r25	; 0x14
     3b4:	8b 8b       	std	Y+19, r24	; 0x13
     3b6:	3f c0       	rjmp	.+126    	; 0x436 <OLED_Init+0xe4>
	else if (__tmp > 65535)
     3b8:	6d 89       	ldd	r22, Y+21	; 0x15
     3ba:	7e 89       	ldd	r23, Y+22	; 0x16
     3bc:	8f 89       	ldd	r24, Y+23	; 0x17
     3be:	98 8d       	ldd	r25, Y+24	; 0x18
     3c0:	20 e0       	ldi	r18, 0x00	; 0
     3c2:	3f ef       	ldi	r19, 0xFF	; 255
     3c4:	4f e7       	ldi	r20, 0x7F	; 127
     3c6:	57 e4       	ldi	r21, 0x47	; 71
     3c8:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__gtsf2>
     3cc:	18 16       	cp	r1, r24
     3ce:	4c f5       	brge	.+82     	; 0x422 <OLED_Init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3d0:	69 8d       	ldd	r22, Y+25	; 0x19
     3d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
     3d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	40 e2       	ldi	r20, 0x20	; 32
     3de:	51 e4       	ldi	r21, 0x41	; 65
     3e0:	0e 94 2f 08 	call	0x105e	; 0x105e <__mulsf3>
     3e4:	dc 01       	movw	r26, r24
     3e6:	cb 01       	movw	r24, r22
     3e8:	bc 01       	movw	r22, r24
     3ea:	cd 01       	movw	r24, r26
     3ec:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fixunssfsi>
     3f0:	dc 01       	movw	r26, r24
     3f2:	cb 01       	movw	r24, r22
     3f4:	9c 8b       	std	Y+20, r25	; 0x14
     3f6:	8b 8b       	std	Y+19, r24	; 0x13
     3f8:	0f c0       	rjmp	.+30     	; 0x418 <OLED_Init+0xc6>
     3fa:	80 e9       	ldi	r24, 0x90	; 144
     3fc:	91 e0       	ldi	r25, 0x01	; 1
     3fe:	9a 8b       	std	Y+18, r25	; 0x12
     400:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     402:	89 89       	ldd	r24, Y+17	; 0x11
     404:	9a 89       	ldd	r25, Y+18	; 0x12
     406:	01 97       	sbiw	r24, 0x01	; 1
     408:	f1 f7       	brne	.-4      	; 0x406 <OLED_Init+0xb4>
     40a:	9a 8b       	std	Y+18, r25	; 0x12
     40c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     40e:	8b 89       	ldd	r24, Y+19	; 0x13
     410:	9c 89       	ldd	r25, Y+20	; 0x14
     412:	01 97       	sbiw	r24, 0x01	; 1
     414:	9c 8b       	std	Y+20, r25	; 0x14
     416:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     418:	8b 89       	ldd	r24, Y+19	; 0x13
     41a:	9c 89       	ldd	r25, Y+20	; 0x14
     41c:	00 97       	sbiw	r24, 0x00	; 0
     41e:	69 f7       	brne	.-38     	; 0x3fa <OLED_Init+0xa8>
     420:	14 c0       	rjmp	.+40     	; 0x44a <OLED_Init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     422:	6d 89       	ldd	r22, Y+21	; 0x15
     424:	7e 89       	ldd	r23, Y+22	; 0x16
     426:	8f 89       	ldd	r24, Y+23	; 0x17
     428:	98 8d       	ldd	r25, Y+24	; 0x18
     42a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fixunssfsi>
     42e:	dc 01       	movw	r26, r24
     430:	cb 01       	movw	r24, r22
     432:	9c 8b       	std	Y+20, r25	; 0x14
     434:	8b 8b       	std	Y+19, r24	; 0x13
     436:	8b 89       	ldd	r24, Y+19	; 0x13
     438:	9c 89       	ldd	r25, Y+20	; 0x14
     43a:	98 8b       	std	Y+16, r25	; 0x10
     43c:	8f 87       	std	Y+15, r24	; 0x0f
     43e:	8f 85       	ldd	r24, Y+15	; 0x0f
     440:	98 89       	ldd	r25, Y+16	; 0x10
     442:	01 97       	sbiw	r24, 0x01	; 1
     444:	f1 f7       	brne	.-4      	; 0x442 <OLED_Init+0xf0>
     446:	98 8b       	std	Y+16, r25	; 0x10
     448:	8f 87       	std	Y+15, r24	; 0x0f
    uint8_t init_seq[] = {
        0xAE, 0xD5, 0x80, 0xA8, 0x3F, 0xD3, 0x00, 0x40,
        0x8D, 0x14, 0x20, 0x00, 0xA1, 0xC8, 0xDA, 0x12,
        0x81, 0xCF, 0xD9, 0xF1, 0xDB, 0x40, 0xA4, 0xA6,
        0xAF
    };
     44a:	ce 01       	movw	r24, r28
     44c:	4e 96       	adiw	r24, 0x1e	; 30
     44e:	98 af       	std	Y+56, r25	; 0x38
     450:	8f ab       	std	Y+55, r24	; 0x37
     452:	e3 ec       	ldi	r30, 0xC3	; 195
     454:	f1 e0       	ldi	r31, 0x01	; 1
     456:	fa af       	std	Y+58, r31	; 0x3a
     458:	e9 af       	std	Y+57, r30	; 0x39
     45a:	f9 e1       	ldi	r31, 0x19	; 25
     45c:	fb af       	std	Y+59, r31	; 0x3b
     45e:	e9 ad       	ldd	r30, Y+57	; 0x39
     460:	fa ad       	ldd	r31, Y+58	; 0x3a
     462:	00 80       	ld	r0, Z
     464:	89 ad       	ldd	r24, Y+57	; 0x39
     466:	9a ad       	ldd	r25, Y+58	; 0x3a
     468:	01 96       	adiw	r24, 0x01	; 1
     46a:	9a af       	std	Y+58, r25	; 0x3a
     46c:	89 af       	std	Y+57, r24	; 0x39
     46e:	ef a9       	ldd	r30, Y+55	; 0x37
     470:	f8 ad       	ldd	r31, Y+56	; 0x38
     472:	00 82       	st	Z, r0
     474:	8f a9       	ldd	r24, Y+55	; 0x37
     476:	98 ad       	ldd	r25, Y+56	; 0x38
     478:	01 96       	adiw	r24, 0x01	; 1
     47a:	98 af       	std	Y+56, r25	; 0x38
     47c:	8f ab       	std	Y+55, r24	; 0x37
     47e:	9b ad       	ldd	r25, Y+59	; 0x3b
     480:	91 50       	subi	r25, 0x01	; 1
     482:	9b af       	std	Y+59, r25	; 0x3b
     484:	eb ad       	ldd	r30, Y+59	; 0x3b
     486:	ee 23       	and	r30, r30
     488:	51 f7       	brne	.-44     	; 0x45e <OLED_Init+0x10c>
    uint8_t i;
    for(i = 0; i < sizeof(init_seq); i++) {
     48a:	1d 8e       	std	Y+29, r1	; 0x1d
     48c:	80 c0       	rjmp	.+256    	; 0x58e <OLED_Init+0x23c>
        OLED_Command(init_seq[i]);
     48e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     490:	28 2f       	mov	r18, r24
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	ce 01       	movw	r24, r28
     496:	4e 96       	adiw	r24, 0x1e	; 30
     498:	fc 01       	movw	r30, r24
     49a:	e2 0f       	add	r30, r18
     49c:	f3 1f       	adc	r31, r19
     49e:	80 81       	ld	r24, Z
     4a0:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <OLED_Command>
     4a4:	80 e0       	ldi	r24, 0x00	; 0
     4a6:	90 e0       	ldi	r25, 0x00	; 0
     4a8:	a0 ea       	ldi	r26, 0xA0	; 160
     4aa:	b0 e4       	ldi	r27, 0x40	; 64
     4ac:	8b 87       	std	Y+11, r24	; 0x0b
     4ae:	9c 87       	std	Y+12, r25	; 0x0c
     4b0:	ad 87       	std	Y+13, r26	; 0x0d
     4b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4b4:	6b 85       	ldd	r22, Y+11	; 0x0b
     4b6:	7c 85       	ldd	r23, Y+12	; 0x0c
     4b8:	8d 85       	ldd	r24, Y+13	; 0x0d
     4ba:	9e 85       	ldd	r25, Y+14	; 0x0e
     4bc:	20 e0       	ldi	r18, 0x00	; 0
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	4a e7       	ldi	r20, 0x7A	; 122
     4c2:	55 e4       	ldi	r21, 0x45	; 69
     4c4:	0e 94 2f 08 	call	0x105e	; 0x105e <__mulsf3>
     4c8:	dc 01       	movw	r26, r24
     4ca:	cb 01       	movw	r24, r22
     4cc:	8f 83       	std	Y+7, r24	; 0x07
     4ce:	98 87       	std	Y+8, r25	; 0x08
     4d0:	a9 87       	std	Y+9, r26	; 0x09
     4d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     4d4:	6f 81       	ldd	r22, Y+7	; 0x07
     4d6:	78 85       	ldd	r23, Y+8	; 0x08
     4d8:	89 85       	ldd	r24, Y+9	; 0x09
     4da:	9a 85       	ldd	r25, Y+10	; 0x0a
     4dc:	20 e0       	ldi	r18, 0x00	; 0
     4de:	30 e0       	ldi	r19, 0x00	; 0
     4e0:	40 e8       	ldi	r20, 0x80	; 128
     4e2:	5f e3       	ldi	r21, 0x3F	; 63
     4e4:	0e 94 35 0a 	call	0x146a	; 0x146a <__ltsf2>
     4e8:	88 23       	and	r24, r24
     4ea:	2c f4       	brge	.+10     	; 0x4f6 <OLED_Init+0x1a4>
		__ticks = 1;
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	9e 83       	std	Y+6, r25	; 0x06
     4f2:	8d 83       	std	Y+5, r24	; 0x05
     4f4:	3f c0       	rjmp	.+126    	; 0x574 <OLED_Init+0x222>
	else if (__tmp > 65535)
     4f6:	6f 81       	ldd	r22, Y+7	; 0x07
     4f8:	78 85       	ldd	r23, Y+8	; 0x08
     4fa:	89 85       	ldd	r24, Y+9	; 0x09
     4fc:	9a 85       	ldd	r25, Y+10	; 0x0a
     4fe:	20 e0       	ldi	r18, 0x00	; 0
     500:	3f ef       	ldi	r19, 0xFF	; 255
     502:	4f e7       	ldi	r20, 0x7F	; 127
     504:	57 e4       	ldi	r21, 0x47	; 71
     506:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__gtsf2>
     50a:	18 16       	cp	r1, r24
     50c:	4c f5       	brge	.+82     	; 0x560 <OLED_Init+0x20e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     50e:	6b 85       	ldd	r22, Y+11	; 0x0b
     510:	7c 85       	ldd	r23, Y+12	; 0x0c
     512:	8d 85       	ldd	r24, Y+13	; 0x0d
     514:	9e 85       	ldd	r25, Y+14	; 0x0e
     516:	20 e0       	ldi	r18, 0x00	; 0
     518:	30 e0       	ldi	r19, 0x00	; 0
     51a:	40 e2       	ldi	r20, 0x20	; 32
     51c:	51 e4       	ldi	r21, 0x41	; 65
     51e:	0e 94 2f 08 	call	0x105e	; 0x105e <__mulsf3>
     522:	dc 01       	movw	r26, r24
     524:	cb 01       	movw	r24, r22
     526:	bc 01       	movw	r22, r24
     528:	cd 01       	movw	r24, r26
     52a:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fixunssfsi>
     52e:	dc 01       	movw	r26, r24
     530:	cb 01       	movw	r24, r22
     532:	9e 83       	std	Y+6, r25	; 0x06
     534:	8d 83       	std	Y+5, r24	; 0x05
     536:	0f c0       	rjmp	.+30     	; 0x556 <OLED_Init+0x204>
     538:	80 e9       	ldi	r24, 0x90	; 144
     53a:	91 e0       	ldi	r25, 0x01	; 1
     53c:	9c 83       	std	Y+4, r25	; 0x04
     53e:	8b 83       	std	Y+3, r24	; 0x03
     540:	8b 81       	ldd	r24, Y+3	; 0x03
     542:	9c 81       	ldd	r25, Y+4	; 0x04
     544:	01 97       	sbiw	r24, 0x01	; 1
     546:	f1 f7       	brne	.-4      	; 0x544 <OLED_Init+0x1f2>
     548:	9c 83       	std	Y+4, r25	; 0x04
     54a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     54c:	8d 81       	ldd	r24, Y+5	; 0x05
     54e:	9e 81       	ldd	r25, Y+6	; 0x06
     550:	01 97       	sbiw	r24, 0x01	; 1
     552:	9e 83       	std	Y+6, r25	; 0x06
     554:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     556:	8d 81       	ldd	r24, Y+5	; 0x05
     558:	9e 81       	ldd	r25, Y+6	; 0x06
     55a:	00 97       	sbiw	r24, 0x00	; 0
     55c:	69 f7       	brne	.-38     	; 0x538 <OLED_Init+0x1e6>
     55e:	14 c0       	rjmp	.+40     	; 0x588 <OLED_Init+0x236>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     560:	6f 81       	ldd	r22, Y+7	; 0x07
     562:	78 85       	ldd	r23, Y+8	; 0x08
     564:	89 85       	ldd	r24, Y+9	; 0x09
     566:	9a 85       	ldd	r25, Y+10	; 0x0a
     568:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fixunssfsi>
     56c:	dc 01       	movw	r26, r24
     56e:	cb 01       	movw	r24, r22
     570:	9e 83       	std	Y+6, r25	; 0x06
     572:	8d 83       	std	Y+5, r24	; 0x05
     574:	8d 81       	ldd	r24, Y+5	; 0x05
     576:	9e 81       	ldd	r25, Y+6	; 0x06
     578:	9a 83       	std	Y+2, r25	; 0x02
     57a:	89 83       	std	Y+1, r24	; 0x01
     57c:	89 81       	ldd	r24, Y+1	; 0x01
     57e:	9a 81       	ldd	r25, Y+2	; 0x02
     580:	01 97       	sbiw	r24, 0x01	; 1
     582:	f1 f7       	brne	.-4      	; 0x580 <OLED_Init+0x22e>
     584:	9a 83       	std	Y+2, r25	; 0x02
     586:	89 83       	std	Y+1, r24	; 0x01
        0x8D, 0x14, 0x20, 0x00, 0xA1, 0xC8, 0xDA, 0x12,
        0x81, 0xCF, 0xD9, 0xF1, 0xDB, 0x40, 0xA4, 0xA6,
        0xAF
    };
    uint8_t i;
    for(i = 0; i < sizeof(init_seq); i++) {
     588:	8d 8d       	ldd	r24, Y+29	; 0x1d
     58a:	8f 5f       	subi	r24, 0xFF	; 255
     58c:	8d 8f       	std	Y+29, r24	; 0x1d
     58e:	8d 8d       	ldd	r24, Y+29	; 0x1d
     590:	89 31       	cpi	r24, 0x19	; 25
     592:	08 f4       	brcc	.+2      	; 0x596 <OLED_Init+0x244>
     594:	7c cf       	rjmp	.-264    	; 0x48e <OLED_Init+0x13c>
        OLED_Command(init_seq[i]);
        _delay_ms(5);
    }
}
     596:	eb 96       	adiw	r28, 0x3b	; 59
     598:	0f b6       	in	r0, 0x3f	; 63
     59a:	f8 94       	cli
     59c:	de bf       	out	0x3e, r29	; 62
     59e:	0f be       	out	0x3f, r0	; 63
     5a0:	cd bf       	out	0x3d, r28	; 61
     5a2:	cf 91       	pop	r28
     5a4:	df 91       	pop	r29
     5a6:	08 95       	ret

000005a8 <OLED_SetCursor>:

void OLED_SetCursor(uint8_t row, uint8_t col) {
     5a8:	df 93       	push	r29
     5aa:	cf 93       	push	r28
     5ac:	00 d0       	rcall	.+0      	; 0x5ae <OLED_SetCursor+0x6>
     5ae:	cd b7       	in	r28, 0x3d	; 61
     5b0:	de b7       	in	r29, 0x3e	; 62
     5b2:	89 83       	std	Y+1, r24	; 0x01
     5b4:	6a 83       	std	Y+2, r22	; 0x02
    OLED_Command(0xB0 + row);
     5b6:	89 81       	ldd	r24, Y+1	; 0x01
     5b8:	80 55       	subi	r24, 0x50	; 80
     5ba:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <OLED_Command>
    OLED_Command(col & 0x0F);
     5be:	8a 81       	ldd	r24, Y+2	; 0x02
     5c0:	8f 70       	andi	r24, 0x0F	; 15
     5c2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <OLED_Command>
    OLED_Command(0x10 + (col >> 4));
     5c6:	8a 81       	ldd	r24, Y+2	; 0x02
     5c8:	82 95       	swap	r24
     5ca:	8f 70       	andi	r24, 0x0F	; 15
     5cc:	80 5f       	subi	r24, 0xF0	; 240
     5ce:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <OLED_Command>
}
     5d2:	0f 90       	pop	r0
     5d4:	0f 90       	pop	r0
     5d6:	cf 91       	pop	r28
     5d8:	df 91       	pop	r29
     5da:	08 95       	ret

000005dc <OLED_Clear>:

void OLED_Clear() {
     5dc:	df 93       	push	r29
     5de:	cf 93       	push	r28
     5e0:	00 d0       	rcall	.+0      	; 0x5e2 <OLED_Clear+0x6>
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
    uint8_t page;
    for(page = 0; page < 8; page++) {
     5e6:	1a 82       	std	Y+2, r1	; 0x02
     5e8:	12 c0       	rjmp	.+36     	; 0x60e <OLED_Clear+0x32>
        OLED_SetCursor(page, 0);
     5ea:	8a 81       	ldd	r24, Y+2	; 0x02
     5ec:	60 e0       	ldi	r22, 0x00	; 0
     5ee:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <OLED_SetCursor>
        uint8_t col;
        for(col = 0; col < 128; col++) {
     5f2:	19 82       	std	Y+1, r1	; 0x01
     5f4:	06 c0       	rjmp	.+12     	; 0x602 <OLED_Clear+0x26>
            OLED_Data(0x00);
     5f6:	80 e0       	ldi	r24, 0x00	; 0
     5f8:	0e 94 92 01 	call	0x324	; 0x324 <OLED_Data>
void OLED_Clear() {
    uint8_t page;
    for(page = 0; page < 8; page++) {
        OLED_SetCursor(page, 0);
        uint8_t col;
        for(col = 0; col < 128; col++) {
     5fc:	89 81       	ldd	r24, Y+1	; 0x01
     5fe:	8f 5f       	subi	r24, 0xFF	; 255
     600:	89 83       	std	Y+1, r24	; 0x01
     602:	89 81       	ldd	r24, Y+1	; 0x01
     604:	88 23       	and	r24, r24
     606:	bc f7       	brge	.-18     	; 0x5f6 <OLED_Clear+0x1a>
    OLED_Command(0x10 + (col >> 4));
}

void OLED_Clear() {
    uint8_t page;
    for(page = 0; page < 8; page++) {
     608:	8a 81       	ldd	r24, Y+2	; 0x02
     60a:	8f 5f       	subi	r24, 0xFF	; 255
     60c:	8a 83       	std	Y+2, r24	; 0x02
     60e:	8a 81       	ldd	r24, Y+2	; 0x02
     610:	88 30       	cpi	r24, 0x08	; 8
     612:	58 f3       	brcs	.-42     	; 0x5ea <OLED_Clear+0xe>
        uint8_t col;
        for(col = 0; col < 128; col++) {
            OLED_Data(0x00);
        }
    }
}
     614:	0f 90       	pop	r0
     616:	0f 90       	pop	r0
     618:	cf 91       	pop	r28
     61a:	df 91       	pop	r29
     61c:	08 95       	ret

0000061e <OLED_PrintChar>:

void OLED_PrintChar(char c) {
     61e:	df 93       	push	r29
     620:	cf 93       	push	r28
     622:	00 d0       	rcall	.+0      	; 0x624 <OLED_PrintChar+0x6>
     624:	00 d0       	rcall	.+0      	; 0x626 <OLED_PrintChar+0x8>
     626:	cd b7       	in	r28, 0x3d	; 61
     628:	de b7       	in	r29, 0x3e	; 62
     62a:	8c 83       	std	Y+4, r24	; 0x04
    uint8_t index = 0;
     62c:	1b 82       	std	Y+3, r1	; 0x03

    if(c == ' ') {
     62e:	8c 81       	ldd	r24, Y+4	; 0x04
     630:	80 32       	cpi	r24, 0x20	; 32
     632:	61 f4       	brne	.+24     	; 0x64c <OLED_PrintChar+0x2e>
        uint8_t i;
        for(i = 0; i < 6; i++) OLED_Data(0x00);
     634:	19 82       	std	Y+1, r1	; 0x01
     636:	06 c0       	rjmp	.+12     	; 0x644 <OLED_PrintChar+0x26>
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	0e 94 92 01 	call	0x324	; 0x324 <OLED_Data>
     63e:	89 81       	ldd	r24, Y+1	; 0x01
     640:	8f 5f       	subi	r24, 0xFF	; 255
     642:	89 83       	std	Y+1, r24	; 0x01
     644:	89 81       	ldd	r24, Y+1	; 0x01
     646:	86 30       	cpi	r24, 0x06	; 6
     648:	b8 f3       	brcs	.-18     	; 0x638 <OLED_PrintChar+0x1a>
     64a:	45 c0       	rjmp	.+138    	; 0x6d6 <OLED_PrintChar+0xb8>
        return;
    }
    else if(c >= '0' && c <= '9') {
     64c:	8c 81       	ldd	r24, Y+4	; 0x04
     64e:	80 33       	cpi	r24, 0x30	; 48
     650:	3c f0       	brlt	.+14     	; 0x660 <OLED_PrintChar+0x42>
     652:	8c 81       	ldd	r24, Y+4	; 0x04
     654:	8a 33       	cpi	r24, 0x3A	; 58
     656:	24 f4       	brge	.+8      	; 0x660 <OLED_PrintChar+0x42>
        index = c - '0';
     658:	8c 81       	ldd	r24, Y+4	; 0x04
     65a:	80 53       	subi	r24, 0x30	; 48
     65c:	8b 83       	std	Y+3, r24	; 0x03
     65e:	1b c0       	rjmp	.+54     	; 0x696 <OLED_PrintChar+0x78>
    }
    else if(c >= 'A' && c <= 'Z') {
     660:	8c 81       	ldd	r24, Y+4	; 0x04
     662:	81 34       	cpi	r24, 0x41	; 65
     664:	3c f0       	brlt	.+14     	; 0x674 <OLED_PrintChar+0x56>
     666:	8c 81       	ldd	r24, Y+4	; 0x04
     668:	8b 35       	cpi	r24, 0x5B	; 91
     66a:	24 f4       	brge	.+8      	; 0x674 <OLED_PrintChar+0x56>
        index = 10 + (c - 'A');
     66c:	8c 81       	ldd	r24, Y+4	; 0x04
     66e:	87 53       	subi	r24, 0x37	; 55
     670:	8b 83       	std	Y+3, r24	; 0x03
     672:	11 c0       	rjmp	.+34     	; 0x696 <OLED_PrintChar+0x78>
    }
    else if(c == ':') {
     674:	8c 81       	ldd	r24, Y+4	; 0x04
     676:	8a 33       	cpi	r24, 0x3A	; 58
     678:	19 f4       	brne	.+6      	; 0x680 <OLED_PrintChar+0x62>
        index = 36;
     67a:	84 e2       	ldi	r24, 0x24	; 36
     67c:	8b 83       	std	Y+3, r24	; 0x03
     67e:	0b c0       	rjmp	.+22     	; 0x696 <OLED_PrintChar+0x78>
    }
    else if(c == '%') {
     680:	8c 81       	ldd	r24, Y+4	; 0x04
     682:	85 32       	cpi	r24, 0x25	; 37
     684:	19 f4       	brne	.+6      	; 0x68c <OLED_PrintChar+0x6e>
        index = 37;
     686:	85 e2       	ldi	r24, 0x25	; 37
     688:	8b 83       	std	Y+3, r24	; 0x03
     68a:	05 c0       	rjmp	.+10     	; 0x696 <OLED_PrintChar+0x78>
    }
    else if(c == '°') {
     68c:	8c 81       	ldd	r24, Y+4	; 0x04
     68e:	80 3b       	cpi	r24, 0xB0	; 176
     690:	11 f4       	brne	.+4      	; 0x696 <OLED_PrintChar+0x78>
        index = 38;
     692:	86 e2       	ldi	r24, 0x26	; 38
     694:	8b 83       	std	Y+3, r24	; 0x03
    }

    // Print the character
    uint8_t i;
    for(i = 0; i < 5; i++) {
     696:	1a 82       	std	Y+2, r1	; 0x02
     698:	18 c0       	rjmp	.+48     	; 0x6ca <OLED_PrintChar+0xac>
        OLED_Data(font5x7[index][i]);
     69a:	8b 81       	ldd	r24, Y+3	; 0x03
     69c:	28 2f       	mov	r18, r24
     69e:	30 e0       	ldi	r19, 0x00	; 0
     6a0:	8a 81       	ldd	r24, Y+2	; 0x02
     6a2:	48 2f       	mov	r20, r24
     6a4:	50 e0       	ldi	r21, 0x00	; 0
     6a6:	c9 01       	movw	r24, r18
     6a8:	88 0f       	add	r24, r24
     6aa:	99 1f       	adc	r25, r25
     6ac:	88 0f       	add	r24, r24
     6ae:	99 1f       	adc	r25, r25
     6b0:	82 0f       	add	r24, r18
     6b2:	93 1f       	adc	r25, r19
     6b4:	84 0f       	add	r24, r20
     6b6:	95 1f       	adc	r25, r21
     6b8:	fc 01       	movw	r30, r24
     6ba:	e0 50       	subi	r30, 0x00	; 0
     6bc:	ff 4f       	sbci	r31, 0xFF	; 255
     6be:	80 81       	ld	r24, Z
     6c0:	0e 94 92 01 	call	0x324	; 0x324 <OLED_Data>
        index = 38;
    }

    // Print the character
    uint8_t i;
    for(i = 0; i < 5; i++) {
     6c4:	8a 81       	ldd	r24, Y+2	; 0x02
     6c6:	8f 5f       	subi	r24, 0xFF	; 255
     6c8:	8a 83       	std	Y+2, r24	; 0x02
     6ca:	8a 81       	ldd	r24, Y+2	; 0x02
     6cc:	85 30       	cpi	r24, 0x05	; 5
     6ce:	28 f3       	brcs	.-54     	; 0x69a <OLED_PrintChar+0x7c>
        OLED_Data(font5x7[index][i]);
    }
    OLED_Data(0x00); // Column padding
     6d0:	80 e0       	ldi	r24, 0x00	; 0
     6d2:	0e 94 92 01 	call	0x324	; 0x324 <OLED_Data>
}
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	0f 90       	pop	r0
     6de:	cf 91       	pop	r28
     6e0:	df 91       	pop	r29
     6e2:	08 95       	ret

000006e4 <OLED_PrintString>:

void OLED_PrintString(const char *str) {
     6e4:	df 93       	push	r29
     6e6:	cf 93       	push	r28
     6e8:	00 d0       	rcall	.+0      	; 0x6ea <OLED_PrintString+0x6>
     6ea:	cd b7       	in	r28, 0x3d	; 61
     6ec:	de b7       	in	r29, 0x3e	; 62
     6ee:	9a 83       	std	Y+2, r25	; 0x02
     6f0:	89 83       	std	Y+1, r24	; 0x01
     6f2:	0b c0       	rjmp	.+22     	; 0x70a <OLED_PrintString+0x26>
    while(*str) {
        OLED_PrintChar(*str++);
     6f4:	e9 81       	ldd	r30, Y+1	; 0x01
     6f6:	fa 81       	ldd	r31, Y+2	; 0x02
     6f8:	20 81       	ld	r18, Z
     6fa:	89 81       	ldd	r24, Y+1	; 0x01
     6fc:	9a 81       	ldd	r25, Y+2	; 0x02
     6fe:	01 96       	adiw	r24, 0x01	; 1
     700:	9a 83       	std	Y+2, r25	; 0x02
     702:	89 83       	std	Y+1, r24	; 0x01
     704:	82 2f       	mov	r24, r18
     706:	0e 94 0f 03 	call	0x61e	; 0x61e <OLED_PrintChar>
    }
    OLED_Data(0x00); // Column padding
}

void OLED_PrintString(const char *str) {
    while(*str) {
     70a:	e9 81       	ldd	r30, Y+1	; 0x01
     70c:	fa 81       	ldd	r31, Y+2	; 0x02
     70e:	80 81       	ld	r24, Z
     710:	88 23       	and	r24, r24
     712:	81 f7       	brne	.-32     	; 0x6f4 <OLED_PrintString+0x10>
        OLED_PrintChar(*str++);
    }
}
     714:	0f 90       	pop	r0
     716:	0f 90       	pop	r0
     718:	cf 91       	pop	r28
     71a:	df 91       	pop	r29
     71c:	08 95       	ret

0000071e <CalcCRC>:

uint8_t CalcCRC(uint8_t *data, uint8_t len) {
     71e:	df 93       	push	r29
     720:	cf 93       	push	r28
     722:	cd b7       	in	r28, 0x3d	; 61
     724:	de b7       	in	r29, 0x3e	; 62
     726:	27 97       	sbiw	r28, 0x07	; 7
     728:	0f b6       	in	r0, 0x3f	; 63
     72a:	f8 94       	cli
     72c:	de bf       	out	0x3e, r29	; 62
     72e:	0f be       	out	0x3f, r0	; 63
     730:	cd bf       	out	0x3d, r28	; 61
     732:	9e 83       	std	Y+6, r25	; 0x06
     734:	8d 83       	std	Y+5, r24	; 0x05
     736:	6f 83       	std	Y+7, r22	; 0x07
    uint8_t crc = 0x00;
     738:	1c 82       	std	Y+4, r1	; 0x04
    uint8_t poly = 0x31;
     73a:	81 e3       	ldi	r24, 0x31	; 49
     73c:	8b 83       	std	Y+3, r24	; 0x03

    uint8_t i;
    for(i = 0; i < len; i++) {
     73e:	1a 82       	std	Y+2, r1	; 0x02
     740:	27 c0       	rjmp	.+78     	; 0x790 <CalcCRC+0x72>
        crc ^= data[i];
     742:	8a 81       	ldd	r24, Y+2	; 0x02
     744:	28 2f       	mov	r18, r24
     746:	30 e0       	ldi	r19, 0x00	; 0
     748:	8d 81       	ldd	r24, Y+5	; 0x05
     74a:	9e 81       	ldd	r25, Y+6	; 0x06
     74c:	fc 01       	movw	r30, r24
     74e:	e2 0f       	add	r30, r18
     750:	f3 1f       	adc	r31, r19
     752:	90 81       	ld	r25, Z
     754:	8c 81       	ldd	r24, Y+4	; 0x04
     756:	89 27       	eor	r24, r25
     758:	8c 83       	std	Y+4, r24	; 0x04
        uint8_t j;
        for(j = 0; j < 8; j++) {
     75a:	19 82       	std	Y+1, r1	; 0x01
     75c:	13 c0       	rjmp	.+38     	; 0x784 <CalcCRC+0x66>
            if(crc & 0x80) {
     75e:	8c 81       	ldd	r24, Y+4	; 0x04
     760:	88 23       	and	r24, r24
     762:	54 f4       	brge	.+20     	; 0x778 <CalcCRC+0x5a>
                crc = (crc << 1) ^ poly;
     764:	8c 81       	ldd	r24, Y+4	; 0x04
     766:	88 2f       	mov	r24, r24
     768:	90 e0       	ldi	r25, 0x00	; 0
     76a:	88 0f       	add	r24, r24
     76c:	99 1f       	adc	r25, r25
     76e:	98 2f       	mov	r25, r24
     770:	8b 81       	ldd	r24, Y+3	; 0x03
     772:	89 27       	eor	r24, r25
     774:	8c 83       	std	Y+4, r24	; 0x04
     776:	03 c0       	rjmp	.+6      	; 0x77e <CalcCRC+0x60>
            } else {
                crc <<= 1;
     778:	8c 81       	ldd	r24, Y+4	; 0x04
     77a:	88 0f       	add	r24, r24
     77c:	8c 83       	std	Y+4, r24	; 0x04

    uint8_t i;
    for(i = 0; i < len; i++) {
        crc ^= data[i];
        uint8_t j;
        for(j = 0; j < 8; j++) {
     77e:	89 81       	ldd	r24, Y+1	; 0x01
     780:	8f 5f       	subi	r24, 0xFF	; 255
     782:	89 83       	std	Y+1, r24	; 0x01
     784:	89 81       	ldd	r24, Y+1	; 0x01
     786:	88 30       	cpi	r24, 0x08	; 8
     788:	50 f3       	brcs	.-44     	; 0x75e <CalcCRC+0x40>
uint8_t CalcCRC(uint8_t *data, uint8_t len) {
    uint8_t crc = 0x00;
    uint8_t poly = 0x31;

    uint8_t i;
    for(i = 0; i < len; i++) {
     78a:	8a 81       	ldd	r24, Y+2	; 0x02
     78c:	8f 5f       	subi	r24, 0xFF	; 255
     78e:	8a 83       	std	Y+2, r24	; 0x02
     790:	9a 81       	ldd	r25, Y+2	; 0x02
     792:	8f 81       	ldd	r24, Y+7	; 0x07
     794:	98 17       	cp	r25, r24
     796:	a8 f2       	brcs	.-86     	; 0x742 <CalcCRC+0x24>
            } else {
                crc <<= 1;
            }
        }
    }
    return crc;
     798:	8c 81       	ldd	r24, Y+4	; 0x04
}
     79a:	27 96       	adiw	r28, 0x07	; 7
     79c:	0f b6       	in	r0, 0x3f	; 63
     79e:	f8 94       	cli
     7a0:	de bf       	out	0x3e, r29	; 62
     7a2:	0f be       	out	0x3f, r0	; 63
     7a4:	cd bf       	out	0x3d, r28	; 61
     7a6:	cf 91       	pop	r28
     7a8:	df 91       	pop	r29
     7aa:	08 95       	ret

000007ac <ReadSensor>:

void ReadSensor(SensorData *data) {
     7ac:	df 93       	push	r29
     7ae:	cf 93       	push	r28
     7b0:	cd b7       	in	r28, 0x3d	; 61
     7b2:	de b7       	in	r29, 0x3e	; 62
     7b4:	a1 97       	sbiw	r28, 0x21	; 33
     7b6:	0f b6       	in	r0, 0x3f	; 63
     7b8:	f8 94       	cli
     7ba:	de bf       	out	0x3e, r29	; 62
     7bc:	0f be       	out	0x3f, r0	; 63
     7be:	cd bf       	out	0x3d, r28	; 61
     7c0:	99 a3       	std	Y+33, r25	; 0x21
     7c2:	88 a3       	std	Y+32, r24	; 0x20
    SensorReading reading;

    // Read temperature
    I2C_Start();
     7c4:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_Start>
    I2C_Write(SENSOR_ADDR);
     7c8:	80 e8       	ldi	r24, 0x80	; 128
     7ca:	0e 94 3e 01 	call	0x27c	; 0x27c <I2C_Write>
    I2C_Write(0xF3);
     7ce:	83 ef       	ldi	r24, 0xF3	; 243
     7d0:	0e 94 3e 01 	call	0x27c	; 0x27c <I2C_Write>
    I2C_Stop();
     7d4:	0e 94 69 00 	call	0xd2	; 0xd2 <I2C_Stop>
     7d8:	80 e0       	ldi	r24, 0x00	; 0
     7da:	90 e0       	ldi	r25, 0x00	; 0
     7dc:	a8 e4       	ldi	r26, 0x48	; 72
     7de:	b2 e4       	ldi	r27, 0x42	; 66
     7e0:	89 8f       	std	Y+25, r24	; 0x19
     7e2:	9a 8f       	std	Y+26, r25	; 0x1a
     7e4:	ab 8f       	std	Y+27, r26	; 0x1b
     7e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7e8:	69 8d       	ldd	r22, Y+25	; 0x19
     7ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
     7ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
     7ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
     7f0:	20 e0       	ldi	r18, 0x00	; 0
     7f2:	30 e0       	ldi	r19, 0x00	; 0
     7f4:	4a e7       	ldi	r20, 0x7A	; 122
     7f6:	55 e4       	ldi	r21, 0x45	; 69
     7f8:	0e 94 2f 08 	call	0x105e	; 0x105e <__mulsf3>
     7fc:	dc 01       	movw	r26, r24
     7fe:	cb 01       	movw	r24, r22
     800:	8d 8b       	std	Y+21, r24	; 0x15
     802:	9e 8b       	std	Y+22, r25	; 0x16
     804:	af 8b       	std	Y+23, r26	; 0x17
     806:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     808:	6d 89       	ldd	r22, Y+21	; 0x15
     80a:	7e 89       	ldd	r23, Y+22	; 0x16
     80c:	8f 89       	ldd	r24, Y+23	; 0x17
     80e:	98 8d       	ldd	r25, Y+24	; 0x18
     810:	20 e0       	ldi	r18, 0x00	; 0
     812:	30 e0       	ldi	r19, 0x00	; 0
     814:	40 e8       	ldi	r20, 0x80	; 128
     816:	5f e3       	ldi	r21, 0x3F	; 63
     818:	0e 94 35 0a 	call	0x146a	; 0x146a <__ltsf2>
     81c:	88 23       	and	r24, r24
     81e:	2c f4       	brge	.+10     	; 0x82a <ReadSensor+0x7e>
		__ticks = 1;
     820:	81 e0       	ldi	r24, 0x01	; 1
     822:	90 e0       	ldi	r25, 0x00	; 0
     824:	9c 8b       	std	Y+20, r25	; 0x14
     826:	8b 8b       	std	Y+19, r24	; 0x13
     828:	3f c0       	rjmp	.+126    	; 0x8a8 <ReadSensor+0xfc>
	else if (__tmp > 65535)
     82a:	6d 89       	ldd	r22, Y+21	; 0x15
     82c:	7e 89       	ldd	r23, Y+22	; 0x16
     82e:	8f 89       	ldd	r24, Y+23	; 0x17
     830:	98 8d       	ldd	r25, Y+24	; 0x18
     832:	20 e0       	ldi	r18, 0x00	; 0
     834:	3f ef       	ldi	r19, 0xFF	; 255
     836:	4f e7       	ldi	r20, 0x7F	; 127
     838:	57 e4       	ldi	r21, 0x47	; 71
     83a:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__gtsf2>
     83e:	18 16       	cp	r1, r24
     840:	4c f5       	brge	.+82     	; 0x894 <ReadSensor+0xe8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     842:	69 8d       	ldd	r22, Y+25	; 0x19
     844:	7a 8d       	ldd	r23, Y+26	; 0x1a
     846:	8b 8d       	ldd	r24, Y+27	; 0x1b
     848:	9c 8d       	ldd	r25, Y+28	; 0x1c
     84a:	20 e0       	ldi	r18, 0x00	; 0
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	40 e2       	ldi	r20, 0x20	; 32
     850:	51 e4       	ldi	r21, 0x41	; 65
     852:	0e 94 2f 08 	call	0x105e	; 0x105e <__mulsf3>
     856:	dc 01       	movw	r26, r24
     858:	cb 01       	movw	r24, r22
     85a:	bc 01       	movw	r22, r24
     85c:	cd 01       	movw	r24, r26
     85e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fixunssfsi>
     862:	dc 01       	movw	r26, r24
     864:	cb 01       	movw	r24, r22
     866:	9c 8b       	std	Y+20, r25	; 0x14
     868:	8b 8b       	std	Y+19, r24	; 0x13
     86a:	0f c0       	rjmp	.+30     	; 0x88a <ReadSensor+0xde>
     86c:	80 e9       	ldi	r24, 0x90	; 144
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	9a 8b       	std	Y+18, r25	; 0x12
     872:	89 8b       	std	Y+17, r24	; 0x11
     874:	89 89       	ldd	r24, Y+17	; 0x11
     876:	9a 89       	ldd	r25, Y+18	; 0x12
     878:	01 97       	sbiw	r24, 0x01	; 1
     87a:	f1 f7       	brne	.-4      	; 0x878 <ReadSensor+0xcc>
     87c:	9a 8b       	std	Y+18, r25	; 0x12
     87e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     880:	8b 89       	ldd	r24, Y+19	; 0x13
     882:	9c 89       	ldd	r25, Y+20	; 0x14
     884:	01 97       	sbiw	r24, 0x01	; 1
     886:	9c 8b       	std	Y+20, r25	; 0x14
     888:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     88a:	8b 89       	ldd	r24, Y+19	; 0x13
     88c:	9c 89       	ldd	r25, Y+20	; 0x14
     88e:	00 97       	sbiw	r24, 0x00	; 0
     890:	69 f7       	brne	.-38     	; 0x86c <ReadSensor+0xc0>
     892:	14 c0       	rjmp	.+40     	; 0x8bc <ReadSensor+0x110>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     894:	6d 89       	ldd	r22, Y+21	; 0x15
     896:	7e 89       	ldd	r23, Y+22	; 0x16
     898:	8f 89       	ldd	r24, Y+23	; 0x17
     89a:	98 8d       	ldd	r25, Y+24	; 0x18
     89c:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fixunssfsi>
     8a0:	dc 01       	movw	r26, r24
     8a2:	cb 01       	movw	r24, r22
     8a4:	9c 8b       	std	Y+20, r25	; 0x14
     8a6:	8b 8b       	std	Y+19, r24	; 0x13
     8a8:	8b 89       	ldd	r24, Y+19	; 0x13
     8aa:	9c 89       	ldd	r25, Y+20	; 0x14
     8ac:	98 8b       	std	Y+16, r25	; 0x10
     8ae:	8f 87       	std	Y+15, r24	; 0x0f
     8b0:	8f 85       	ldd	r24, Y+15	; 0x0f
     8b2:	98 89       	ldd	r25, Y+16	; 0x10
     8b4:	01 97       	sbiw	r24, 0x01	; 1
     8b6:	f1 f7       	brne	.-4      	; 0x8b4 <ReadSensor+0x108>
     8b8:	98 8b       	std	Y+16, r25	; 0x10
     8ba:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(50);

    I2C_Start();
     8bc:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_Start>
    I2C_Write(SENSOR_ADDR | 0x01);
     8c0:	81 e8       	ldi	r24, 0x81	; 129
     8c2:	0e 94 3e 01 	call	0x27c	; 0x27c <I2C_Write>
    reading.msb = I2C_Read_ACK();
     8c6:	0e 94 55 01 	call	0x2aa	; 0x2aa <I2C_Read_ACK>
     8ca:	8d 8f       	std	Y+29, r24	; 0x1d
    reading.lsb = I2C_Read_ACK();
     8cc:	0e 94 55 01 	call	0x2aa	; 0x2aa <I2C_Read_ACK>
     8d0:	8e 8f       	std	Y+30, r24	; 0x1e
    reading.crc = I2C_Read_NACK();
     8d2:	0e 94 68 01 	call	0x2d0	; 0x2d0 <I2C_Read_NACK>
     8d6:	8f 8f       	std	Y+31, r24	; 0x1f
    I2C_Stop();
     8d8:	0e 94 69 00 	call	0xd2	; 0xd2 <I2C_Stop>

    if(CalcCRC(&reading.msb, 2) == reading.crc) {
     8dc:	ce 01       	movw	r24, r28
     8de:	4d 96       	adiw	r24, 0x1d	; 29
     8e0:	62 e0       	ldi	r22, 0x02	; 2
     8e2:	0e 94 8f 03 	call	0x71e	; 0x71e <CalcCRC>
     8e6:	98 2f       	mov	r25, r24
     8e8:	8f 8d       	ldd	r24, Y+31	; 0x1f
     8ea:	98 17       	cp	r25, r24
     8ec:	e1 f5       	brne	.+120    	; 0x966 <__stack+0x67>
        data->temp = (int)(-46.85 + (175.72 * ((reading.msb << 8) | reading.lsb) / 65536.0));
     8ee:	8d 8d       	ldd	r24, Y+29	; 0x1d
     8f0:	88 2f       	mov	r24, r24
     8f2:	90 e0       	ldi	r25, 0x00	; 0
     8f4:	38 2f       	mov	r19, r24
     8f6:	22 27       	eor	r18, r18
     8f8:	8e 8d       	ldd	r24, Y+30	; 0x1e
     8fa:	88 2f       	mov	r24, r24
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	82 2b       	or	r24, r18
     900:	93 2b       	or	r25, r19
     902:	aa 27       	eor	r26, r26
     904:	97 fd       	sbrc	r25, 7
     906:	a0 95       	com	r26
     908:	ba 2f       	mov	r27, r26
     90a:	bc 01       	movw	r22, r24
     90c:	cd 01       	movw	r24, r26
     90e:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__floatsisf>
     912:	dc 01       	movw	r26, r24
     914:	cb 01       	movw	r24, r22
     916:	bc 01       	movw	r22, r24
     918:	cd 01       	movw	r24, r26
     91a:	22 e5       	ldi	r18, 0x52	; 82
     91c:	38 eb       	ldi	r19, 0xB8	; 184
     91e:	4f e2       	ldi	r20, 0x2F	; 47
     920:	53 e4       	ldi	r21, 0x43	; 67
     922:	0e 94 2f 08 	call	0x105e	; 0x105e <__mulsf3>
     926:	dc 01       	movw	r26, r24
     928:	cb 01       	movw	r24, r22
     92a:	bc 01       	movw	r22, r24
     92c:	cd 01       	movw	r24, r26
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e8       	ldi	r20, 0x80	; 128
     934:	57 e4       	ldi	r21, 0x47	; 71
     936:	0e 94 29 09 	call	0x1252	; 0x1252 <__divsf3>
     93a:	dc 01       	movw	r26, r24
     93c:	cb 01       	movw	r24, r22
     93e:	bc 01       	movw	r22, r24
     940:	cd 01       	movw	r24, r26
     942:	26 e6       	ldi	r18, 0x66	; 102
     944:	36 e6       	ldi	r19, 0x66	; 102
     946:	4b e3       	ldi	r20, 0x3B	; 59
     948:	52 e4       	ldi	r21, 0x42	; 66
     94a:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__subsf3>
     94e:	dc 01       	movw	r26, r24
     950:	cb 01       	movw	r24, r22
     952:	bc 01       	movw	r22, r24
     954:	cd 01       	movw	r24, r26
     956:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__fixsfsi>
     95a:	dc 01       	movw	r26, r24
     95c:	cb 01       	movw	r24, r22
     95e:	e8 a1       	ldd	r30, Y+32	; 0x20
     960:	f9 a1       	ldd	r31, Y+33	; 0x21
     962:	91 83       	std	Z+1, r25	; 0x01
     964:	80 83       	st	Z, r24
    }

    // Read humidity
    I2C_Start();
     966:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_Start>
    I2C_Write(SENSOR_ADDR);
     96a:	80 e8       	ldi	r24, 0x80	; 128
     96c:	0e 94 3e 01 	call	0x27c	; 0x27c <I2C_Write>
    I2C_Write(0xF5);
     970:	85 ef       	ldi	r24, 0xF5	; 245
     972:	0e 94 3e 01 	call	0x27c	; 0x27c <I2C_Write>
    I2C_Stop();
     976:	0e 94 69 00 	call	0xd2	; 0xd2 <I2C_Stop>
     97a:	80 e0       	ldi	r24, 0x00	; 0
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	a8 e4       	ldi	r26, 0x48	; 72
     980:	b2 e4       	ldi	r27, 0x42	; 66
     982:	8b 87       	std	Y+11, r24	; 0x0b
     984:	9c 87       	std	Y+12, r25	; 0x0c
     986:	ad 87       	std	Y+13, r26	; 0x0d
     988:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     98a:	6b 85       	ldd	r22, Y+11	; 0x0b
     98c:	7c 85       	ldd	r23, Y+12	; 0x0c
     98e:	8d 85       	ldd	r24, Y+13	; 0x0d
     990:	9e 85       	ldd	r25, Y+14	; 0x0e
     992:	20 e0       	ldi	r18, 0x00	; 0
     994:	30 e0       	ldi	r19, 0x00	; 0
     996:	4a e7       	ldi	r20, 0x7A	; 122
     998:	55 e4       	ldi	r21, 0x45	; 69
     99a:	0e 94 2f 08 	call	0x105e	; 0x105e <__mulsf3>
     99e:	dc 01       	movw	r26, r24
     9a0:	cb 01       	movw	r24, r22
     9a2:	8f 83       	std	Y+7, r24	; 0x07
     9a4:	98 87       	std	Y+8, r25	; 0x08
     9a6:	a9 87       	std	Y+9, r26	; 0x09
     9a8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     9aa:	6f 81       	ldd	r22, Y+7	; 0x07
     9ac:	78 85       	ldd	r23, Y+8	; 0x08
     9ae:	89 85       	ldd	r24, Y+9	; 0x09
     9b0:	9a 85       	ldd	r25, Y+10	; 0x0a
     9b2:	20 e0       	ldi	r18, 0x00	; 0
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	40 e8       	ldi	r20, 0x80	; 128
     9b8:	5f e3       	ldi	r21, 0x3F	; 63
     9ba:	0e 94 35 0a 	call	0x146a	; 0x146a <__ltsf2>
     9be:	88 23       	and	r24, r24
     9c0:	2c f4       	brge	.+10     	; 0x9cc <__stack+0xcd>
		__ticks = 1;
     9c2:	81 e0       	ldi	r24, 0x01	; 1
     9c4:	90 e0       	ldi	r25, 0x00	; 0
     9c6:	9e 83       	std	Y+6, r25	; 0x06
     9c8:	8d 83       	std	Y+5, r24	; 0x05
     9ca:	3f c0       	rjmp	.+126    	; 0xa4a <__stack+0x14b>
	else if (__tmp > 65535)
     9cc:	6f 81       	ldd	r22, Y+7	; 0x07
     9ce:	78 85       	ldd	r23, Y+8	; 0x08
     9d0:	89 85       	ldd	r24, Y+9	; 0x09
     9d2:	9a 85       	ldd	r25, Y+10	; 0x0a
     9d4:	20 e0       	ldi	r18, 0x00	; 0
     9d6:	3f ef       	ldi	r19, 0xFF	; 255
     9d8:	4f e7       	ldi	r20, 0x7F	; 127
     9da:	57 e4       	ldi	r21, 0x47	; 71
     9dc:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__gtsf2>
     9e0:	18 16       	cp	r1, r24
     9e2:	4c f5       	brge	.+82     	; 0xa36 <__stack+0x137>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     9e4:	6b 85       	ldd	r22, Y+11	; 0x0b
     9e6:	7c 85       	ldd	r23, Y+12	; 0x0c
     9e8:	8d 85       	ldd	r24, Y+13	; 0x0d
     9ea:	9e 85       	ldd	r25, Y+14	; 0x0e
     9ec:	20 e0       	ldi	r18, 0x00	; 0
     9ee:	30 e0       	ldi	r19, 0x00	; 0
     9f0:	40 e2       	ldi	r20, 0x20	; 32
     9f2:	51 e4       	ldi	r21, 0x41	; 65
     9f4:	0e 94 2f 08 	call	0x105e	; 0x105e <__mulsf3>
     9f8:	dc 01       	movw	r26, r24
     9fa:	cb 01       	movw	r24, r22
     9fc:	bc 01       	movw	r22, r24
     9fe:	cd 01       	movw	r24, r26
     a00:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fixunssfsi>
     a04:	dc 01       	movw	r26, r24
     a06:	cb 01       	movw	r24, r22
     a08:	9e 83       	std	Y+6, r25	; 0x06
     a0a:	8d 83       	std	Y+5, r24	; 0x05
     a0c:	0f c0       	rjmp	.+30     	; 0xa2c <__stack+0x12d>
     a0e:	80 e9       	ldi	r24, 0x90	; 144
     a10:	91 e0       	ldi	r25, 0x01	; 1
     a12:	9c 83       	std	Y+4, r25	; 0x04
     a14:	8b 83       	std	Y+3, r24	; 0x03
     a16:	8b 81       	ldd	r24, Y+3	; 0x03
     a18:	9c 81       	ldd	r25, Y+4	; 0x04
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	f1 f7       	brne	.-4      	; 0xa1a <__stack+0x11b>
     a1e:	9c 83       	std	Y+4, r25	; 0x04
     a20:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a22:	8d 81       	ldd	r24, Y+5	; 0x05
     a24:	9e 81       	ldd	r25, Y+6	; 0x06
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	9e 83       	std	Y+6, r25	; 0x06
     a2a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a2c:	8d 81       	ldd	r24, Y+5	; 0x05
     a2e:	9e 81       	ldd	r25, Y+6	; 0x06
     a30:	00 97       	sbiw	r24, 0x00	; 0
     a32:	69 f7       	brne	.-38     	; 0xa0e <__stack+0x10f>
     a34:	14 c0       	rjmp	.+40     	; 0xa5e <__stack+0x15f>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a36:	6f 81       	ldd	r22, Y+7	; 0x07
     a38:	78 85       	ldd	r23, Y+8	; 0x08
     a3a:	89 85       	ldd	r24, Y+9	; 0x09
     a3c:	9a 85       	ldd	r25, Y+10	; 0x0a
     a3e:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fixunssfsi>
     a42:	dc 01       	movw	r26, r24
     a44:	cb 01       	movw	r24, r22
     a46:	9e 83       	std	Y+6, r25	; 0x06
     a48:	8d 83       	std	Y+5, r24	; 0x05
     a4a:	8d 81       	ldd	r24, Y+5	; 0x05
     a4c:	9e 81       	ldd	r25, Y+6	; 0x06
     a4e:	9a 83       	std	Y+2, r25	; 0x02
     a50:	89 83       	std	Y+1, r24	; 0x01
     a52:	89 81       	ldd	r24, Y+1	; 0x01
     a54:	9a 81       	ldd	r25, Y+2	; 0x02
     a56:	01 97       	sbiw	r24, 0x01	; 1
     a58:	f1 f7       	brne	.-4      	; 0xa56 <__stack+0x157>
     a5a:	9a 83       	std	Y+2, r25	; 0x02
     a5c:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(50);

    I2C_Start();
     a5e:	0e 94 59 00 	call	0xb2	; 0xb2 <I2C_Start>
    I2C_Write(SENSOR_ADDR | 0x01);
     a62:	81 e8       	ldi	r24, 0x81	; 129
     a64:	0e 94 3e 01 	call	0x27c	; 0x27c <I2C_Write>
    reading.msb = I2C_Read_ACK();
     a68:	0e 94 55 01 	call	0x2aa	; 0x2aa <I2C_Read_ACK>
     a6c:	8d 8f       	std	Y+29, r24	; 0x1d
    reading.lsb = I2C_Read_ACK();
     a6e:	0e 94 55 01 	call	0x2aa	; 0x2aa <I2C_Read_ACK>
     a72:	8e 8f       	std	Y+30, r24	; 0x1e
    reading.crc = I2C_Read_NACK();
     a74:	0e 94 68 01 	call	0x2d0	; 0x2d0 <I2C_Read_NACK>
     a78:	8f 8f       	std	Y+31, r24	; 0x1f
    I2C_Stop();
     a7a:	0e 94 69 00 	call	0xd2	; 0xd2 <I2C_Stop>

    if(CalcCRC(&reading.msb, 2) == reading.crc) {
     a7e:	ce 01       	movw	r24, r28
     a80:	4d 96       	adiw	r24, 0x1d	; 29
     a82:	62 e0       	ldi	r22, 0x02	; 2
     a84:	0e 94 8f 03 	call	0x71e	; 0x71e <CalcCRC>
     a88:	98 2f       	mov	r25, r24
     a8a:	8f 8d       	ldd	r24, Y+31	; 0x1f
     a8c:	98 17       	cp	r25, r24
     a8e:	e1 f5       	brne	.+120    	; 0xb08 <__stack+0x209>
        data->humid = (int)(-6.0 + (125.0 * ((reading.msb << 8) | reading.lsb) / 65536.0));
     a90:	8d 8d       	ldd	r24, Y+29	; 0x1d
     a92:	88 2f       	mov	r24, r24
     a94:	90 e0       	ldi	r25, 0x00	; 0
     a96:	38 2f       	mov	r19, r24
     a98:	22 27       	eor	r18, r18
     a9a:	8e 8d       	ldd	r24, Y+30	; 0x1e
     a9c:	88 2f       	mov	r24, r24
     a9e:	90 e0       	ldi	r25, 0x00	; 0
     aa0:	82 2b       	or	r24, r18
     aa2:	93 2b       	or	r25, r19
     aa4:	aa 27       	eor	r26, r26
     aa6:	97 fd       	sbrc	r25, 7
     aa8:	a0 95       	com	r26
     aaa:	ba 2f       	mov	r27, r26
     aac:	bc 01       	movw	r22, r24
     aae:	cd 01       	movw	r24, r26
     ab0:	0e 94 65 0a 	call	0x14ca	; 0x14ca <__floatsisf>
     ab4:	dc 01       	movw	r26, r24
     ab6:	cb 01       	movw	r24, r22
     ab8:	bc 01       	movw	r22, r24
     aba:	cd 01       	movw	r24, r26
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	30 e0       	ldi	r19, 0x00	; 0
     ac0:	4a ef       	ldi	r20, 0xFA	; 250
     ac2:	52 e4       	ldi	r21, 0x42	; 66
     ac4:	0e 94 2f 08 	call	0x105e	; 0x105e <__mulsf3>
     ac8:	dc 01       	movw	r26, r24
     aca:	cb 01       	movw	r24, r22
     acc:	bc 01       	movw	r22, r24
     ace:	cd 01       	movw	r24, r26
     ad0:	20 e0       	ldi	r18, 0x00	; 0
     ad2:	30 e0       	ldi	r19, 0x00	; 0
     ad4:	40 e8       	ldi	r20, 0x80	; 128
     ad6:	57 e4       	ldi	r21, 0x47	; 71
     ad8:	0e 94 29 09 	call	0x1252	; 0x1252 <__divsf3>
     adc:	dc 01       	movw	r26, r24
     ade:	cb 01       	movw	r24, r22
     ae0:	bc 01       	movw	r22, r24
     ae2:	cd 01       	movw	r24, r26
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 ec       	ldi	r20, 0xC0	; 192
     aea:	50 e4       	ldi	r21, 0x40	; 64
     aec:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__subsf3>
     af0:	dc 01       	movw	r26, r24
     af2:	cb 01       	movw	r24, r22
     af4:	bc 01       	movw	r22, r24
     af6:	cd 01       	movw	r24, r26
     af8:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__fixsfsi>
     afc:	dc 01       	movw	r26, r24
     afe:	cb 01       	movw	r24, r22
     b00:	e8 a1       	ldd	r30, Y+32	; 0x20
     b02:	f9 a1       	ldd	r31, Y+33	; 0x21
     b04:	93 83       	std	Z+3, r25	; 0x03
     b06:	82 83       	std	Z+2, r24	; 0x02
    }
}
     b08:	a1 96       	adiw	r28, 0x21	; 33
     b0a:	0f b6       	in	r0, 0x3f	; 63
     b0c:	f8 94       	cli
     b0e:	de bf       	out	0x3e, r29	; 62
     b10:	0f be       	out	0x3f, r0	; 63
     b12:	cd bf       	out	0x3d, r28	; 61
     b14:	cf 91       	pop	r28
     b16:	df 91       	pop	r29
     b18:	08 95       	ret

00000b1a <main>:

int main(void) {
     b1a:	df 93       	push	r29
     b1c:	cf 93       	push	r28
     b1e:	cd b7       	in	r28, 0x3d	; 61
     b20:	de b7       	in	r29, 0x3e	; 62
     b22:	6c 97       	sbiw	r28, 0x1c	; 28
     b24:	0f b6       	in	r0, 0x3f	; 63
     b26:	f8 94       	cli
     b28:	de bf       	out	0x3e, r29	; 62
     b2a:	0f be       	out	0x3f, r0	; 63
     b2c:	cd bf       	out	0x3d, r28	; 61
    SensorData sensor;
    char value_str[10];

    I2C_Init();
     b2e:	0e 94 4b 00 	call	0x96	; 0x96 <I2C_Init>
    OLED_Init();
     b32:	0e 94 a9 01 	call	0x352	; 0x352 <OLED_Init>
    OLED_Clear();
     b36:	0e 94 ee 02 	call	0x5dc	; 0x5dc <OLED_Clear>

    // Display static labels
    OLED_SetCursor(0, 0);
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <OLED_SetCursor>
    OLED_PrintString(" DARJA E HARARAT:");
     b42:	8c ed       	ldi	r24, 0xDC	; 220
     b44:	91 e0       	ldi	r25, 0x01	; 1
     b46:	0e 94 72 03 	call	0x6e4	; 0x6e4 <OLED_PrintString>
    OLED_SetCursor(2, 0);
     b4a:	82 e0       	ldi	r24, 0x02	; 2
     b4c:	60 e0       	ldi	r22, 0x00	; 0
     b4e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <OLED_SetCursor>
    OLED_PrintString(" NAMI");
     b52:	8e ee       	ldi	r24, 0xEE	; 238
     b54:	91 e0       	ldi	r25, 0x01	; 1
     b56:	0e 94 72 03 	call	0x6e4	; 0x6e4 <OLED_PrintString>

    while(1) {
        ReadSensor(&sensor);
     b5a:	ce 01       	movw	r24, r28
     b5c:	0f 96       	adiw	r24, 0x0f	; 15
     b5e:	0e 94 d6 03 	call	0x7ac	; 0x7ac <ReadSensor>

        // Display temperature
        OLED_SetCursor(1, 0);
     b62:	81 e0       	ldi	r24, 0x01	; 1
     b64:	60 e0       	ldi	r22, 0x00	; 0
     b66:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <OLED_SetCursor>
        itoa(sensor.temp, value_str, 10);
     b6a:	8f 85       	ldd	r24, Y+15	; 0x0f
     b6c:	98 89       	ldd	r25, Y+16	; 0x10
     b6e:	9e 01       	movw	r18, r28
     b70:	2d 5e       	subi	r18, 0xED	; 237
     b72:	3f 4f       	sbci	r19, 0xFF	; 255
     b74:	b9 01       	movw	r22, r18
     b76:	4a e0       	ldi	r20, 0x0A	; 10
     b78:	50 e0       	ldi	r21, 0x00	; 0
     b7a:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <itoa>
        OLED_PrintString(" ");
     b7e:	84 ef       	ldi	r24, 0xF4	; 244
     b80:	91 e0       	ldi	r25, 0x01	; 1
     b82:	0e 94 72 03 	call	0x6e4	; 0x6e4 <OLED_PrintString>
        OLED_PrintString(value_str);
     b86:	ce 01       	movw	r24, r28
     b88:	43 96       	adiw	r24, 0x13	; 19
     b8a:	0e 94 72 03 	call	0x6e4	; 0x6e4 <OLED_PrintString>
        OLED_PrintChar('°');
     b8e:	80 eb       	ldi	r24, 0xB0	; 176
     b90:	0e 94 0f 03 	call	0x61e	; 0x61e <OLED_PrintChar>
        OLED_PrintChar('C');
     b94:	83 e4       	ldi	r24, 0x43	; 67
     b96:	0e 94 0f 03 	call	0x61e	; 0x61e <OLED_PrintChar>

       // Display humidity
        OLED_SetCursor(3, 0);
     b9a:	83 e0       	ldi	r24, 0x03	; 3
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	0e 94 d4 02 	call	0x5a8	; 0x5a8 <OLED_SetCursor>
        itoa(sensor.humid, value_str, 10);
     ba2:	89 89       	ldd	r24, Y+17	; 0x11
     ba4:	9a 89       	ldd	r25, Y+18	; 0x12
     ba6:	9e 01       	movw	r18, r28
     ba8:	2d 5e       	subi	r18, 0xED	; 237
     baa:	3f 4f       	sbci	r19, 0xFF	; 255
     bac:	b9 01       	movw	r22, r18
     bae:	4a e0       	ldi	r20, 0x0A	; 10
     bb0:	50 e0       	ldi	r21, 0x00	; 0
     bb2:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <itoa>
        OLED_PrintString(" ");
     bb6:	84 ef       	ldi	r24, 0xF4	; 244
     bb8:	91 e0       	ldi	r25, 0x01	; 1
     bba:	0e 94 72 03 	call	0x6e4	; 0x6e4 <OLED_PrintString>
        OLED_PrintString(value_str);
     bbe:	ce 01       	movw	r24, r28
     bc0:	43 96       	adiw	r24, 0x13	; 19
     bc2:	0e 94 72 03 	call	0x6e4	; 0x6e4 <OLED_PrintString>
        OLED_PrintChar('%');
     bc6:	85 e2       	ldi	r24, 0x25	; 37
     bc8:	0e 94 0f 03 	call	0x61e	; 0x61e <OLED_PrintChar>
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	aa ef       	ldi	r26, 0xFA	; 250
     bd2:	b4 e4       	ldi	r27, 0x44	; 68
     bd4:	8b 87       	std	Y+11, r24	; 0x0b
     bd6:	9c 87       	std	Y+12, r25	; 0x0c
     bd8:	ad 87       	std	Y+13, r26	; 0x0d
     bda:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bdc:	6b 85       	ldd	r22, Y+11	; 0x0b
     bde:	7c 85       	ldd	r23, Y+12	; 0x0c
     be0:	8d 85       	ldd	r24, Y+13	; 0x0d
     be2:	9e 85       	ldd	r25, Y+14	; 0x0e
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	4a e7       	ldi	r20, 0x7A	; 122
     bea:	55 e4       	ldi	r21, 0x45	; 69
     bec:	0e 94 2f 08 	call	0x105e	; 0x105e <__mulsf3>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	8f 83       	std	Y+7, r24	; 0x07
     bf6:	98 87       	std	Y+8, r25	; 0x08
     bf8:	a9 87       	std	Y+9, r26	; 0x09
     bfa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     bfc:	6f 81       	ldd	r22, Y+7	; 0x07
     bfe:	78 85       	ldd	r23, Y+8	; 0x08
     c00:	89 85       	ldd	r24, Y+9	; 0x09
     c02:	9a 85       	ldd	r25, Y+10	; 0x0a
     c04:	20 e0       	ldi	r18, 0x00	; 0
     c06:	30 e0       	ldi	r19, 0x00	; 0
     c08:	40 e8       	ldi	r20, 0x80	; 128
     c0a:	5f e3       	ldi	r21, 0x3F	; 63
     c0c:	0e 94 35 0a 	call	0x146a	; 0x146a <__ltsf2>
     c10:	88 23       	and	r24, r24
     c12:	2c f4       	brge	.+10     	; 0xc1e <main+0x104>
		__ticks = 1;
     c14:	81 e0       	ldi	r24, 0x01	; 1
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	9e 83       	std	Y+6, r25	; 0x06
     c1a:	8d 83       	std	Y+5, r24	; 0x05
     c1c:	3f c0       	rjmp	.+126    	; 0xc9c <main+0x182>
	else if (__tmp > 65535)
     c1e:	6f 81       	ldd	r22, Y+7	; 0x07
     c20:	78 85       	ldd	r23, Y+8	; 0x08
     c22:	89 85       	ldd	r24, Y+9	; 0x09
     c24:	9a 85       	ldd	r25, Y+10	; 0x0a
     c26:	20 e0       	ldi	r18, 0x00	; 0
     c28:	3f ef       	ldi	r19, 0xFF	; 255
     c2a:	4f e7       	ldi	r20, 0x7F	; 127
     c2c:	57 e4       	ldi	r21, 0x47	; 71
     c2e:	0e 94 d5 09 	call	0x13aa	; 0x13aa <__gtsf2>
     c32:	18 16       	cp	r1, r24
     c34:	4c f5       	brge	.+82     	; 0xc88 <main+0x16e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c36:	6b 85       	ldd	r22, Y+11	; 0x0b
     c38:	7c 85       	ldd	r23, Y+12	; 0x0c
     c3a:	8d 85       	ldd	r24, Y+13	; 0x0d
     c3c:	9e 85       	ldd	r25, Y+14	; 0x0e
     c3e:	20 e0       	ldi	r18, 0x00	; 0
     c40:	30 e0       	ldi	r19, 0x00	; 0
     c42:	40 e2       	ldi	r20, 0x20	; 32
     c44:	51 e4       	ldi	r21, 0x41	; 65
     c46:	0e 94 2f 08 	call	0x105e	; 0x105e <__mulsf3>
     c4a:	dc 01       	movw	r26, r24
     c4c:	cb 01       	movw	r24, r22
     c4e:	bc 01       	movw	r22, r24
     c50:	cd 01       	movw	r24, r26
     c52:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fixunssfsi>
     c56:	dc 01       	movw	r26, r24
     c58:	cb 01       	movw	r24, r22
     c5a:	9e 83       	std	Y+6, r25	; 0x06
     c5c:	8d 83       	std	Y+5, r24	; 0x05
     c5e:	0f c0       	rjmp	.+30     	; 0xc7e <main+0x164>
     c60:	80 e9       	ldi	r24, 0x90	; 144
     c62:	91 e0       	ldi	r25, 0x01	; 1
     c64:	9c 83       	std	Y+4, r25	; 0x04
     c66:	8b 83       	std	Y+3, r24	; 0x03
     c68:	8b 81       	ldd	r24, Y+3	; 0x03
     c6a:	9c 81       	ldd	r25, Y+4	; 0x04
     c6c:	01 97       	sbiw	r24, 0x01	; 1
     c6e:	f1 f7       	brne	.-4      	; 0xc6c <main+0x152>
     c70:	9c 83       	std	Y+4, r25	; 0x04
     c72:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c74:	8d 81       	ldd	r24, Y+5	; 0x05
     c76:	9e 81       	ldd	r25, Y+6	; 0x06
     c78:	01 97       	sbiw	r24, 0x01	; 1
     c7a:	9e 83       	std	Y+6, r25	; 0x06
     c7c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c7e:	8d 81       	ldd	r24, Y+5	; 0x05
     c80:	9e 81       	ldd	r25, Y+6	; 0x06
     c82:	00 97       	sbiw	r24, 0x00	; 0
     c84:	69 f7       	brne	.-38     	; 0xc60 <main+0x146>
     c86:	69 cf       	rjmp	.-302    	; 0xb5a <main+0x40>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c88:	6f 81       	ldd	r22, Y+7	; 0x07
     c8a:	78 85       	ldd	r23, Y+8	; 0x08
     c8c:	89 85       	ldd	r24, Y+9	; 0x09
     c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
     c90:	0e 94 59 06 	call	0xcb2	; 0xcb2 <__fixunssfsi>
     c94:	dc 01       	movw	r26, r24
     c96:	cb 01       	movw	r24, r22
     c98:	9e 83       	std	Y+6, r25	; 0x06
     c9a:	8d 83       	std	Y+5, r24	; 0x05
     c9c:	8d 81       	ldd	r24, Y+5	; 0x05
     c9e:	9e 81       	ldd	r25, Y+6	; 0x06
     ca0:	9a 83       	std	Y+2, r25	; 0x02
     ca2:	89 83       	std	Y+1, r24	; 0x01
     ca4:	89 81       	ldd	r24, Y+1	; 0x01
     ca6:	9a 81       	ldd	r25, Y+2	; 0x02
     ca8:	01 97       	sbiw	r24, 0x01	; 1
     caa:	f1 f7       	brne	.-4      	; 0xca8 <main+0x18e>
     cac:	9a 83       	std	Y+2, r25	; 0x02
     cae:	89 83       	std	Y+1, r24	; 0x01
     cb0:	54 cf       	rjmp	.-344    	; 0xb5a <main+0x40>

00000cb2 <__fixunssfsi>:
     cb2:	ef 92       	push	r14
     cb4:	ff 92       	push	r15
     cb6:	0f 93       	push	r16
     cb8:	1f 93       	push	r17
     cba:	7b 01       	movw	r14, r22
     cbc:	8c 01       	movw	r16, r24
     cbe:	20 e0       	ldi	r18, 0x00	; 0
     cc0:	30 e0       	ldi	r19, 0x00	; 0
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	5f e4       	ldi	r21, 0x4F	; 79
     cc6:	0e 94 05 0a 	call	0x140a	; 0x140a <__gesf2>
     cca:	88 23       	and	r24, r24
     ccc:	8c f0       	brlt	.+34     	; 0xcf0 <__fixunssfsi+0x3e>
     cce:	c8 01       	movw	r24, r16
     cd0:	b7 01       	movw	r22, r14
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	30 e0       	ldi	r19, 0x00	; 0
     cd6:	40 e0       	ldi	r20, 0x00	; 0
     cd8:	5f e4       	ldi	r21, 0x4F	; 79
     cda:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__subsf3>
     cde:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__fixsfsi>
     ce2:	9b 01       	movw	r18, r22
     ce4:	ac 01       	movw	r20, r24
     ce6:	20 50       	subi	r18, 0x00	; 0
     ce8:	30 40       	sbci	r19, 0x00	; 0
     cea:	40 40       	sbci	r20, 0x00	; 0
     cec:	50 48       	sbci	r21, 0x80	; 128
     cee:	06 c0       	rjmp	.+12     	; 0xcfc <__fixunssfsi+0x4a>
     cf0:	c8 01       	movw	r24, r16
     cf2:	b7 01       	movw	r22, r14
     cf4:	0e 94 c3 0a 	call	0x1586	; 0x1586 <__fixsfsi>
     cf8:	9b 01       	movw	r18, r22
     cfa:	ac 01       	movw	r20, r24
     cfc:	b9 01       	movw	r22, r18
     cfe:	ca 01       	movw	r24, r20
     d00:	1f 91       	pop	r17
     d02:	0f 91       	pop	r16
     d04:	ff 90       	pop	r15
     d06:	ef 90       	pop	r14
     d08:	08 95       	ret

00000d0a <_fpadd_parts>:
     d0a:	a0 e0       	ldi	r26, 0x00	; 0
     d0c:	b0 e0       	ldi	r27, 0x00	; 0
     d0e:	eb e8       	ldi	r30, 0x8B	; 139
     d10:	f6 e0       	ldi	r31, 0x06	; 6
     d12:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__prologue_saves__>
     d16:	dc 01       	movw	r26, r24
     d18:	2b 01       	movw	r4, r22
     d1a:	fa 01       	movw	r30, r20
     d1c:	9c 91       	ld	r25, X
     d1e:	92 30       	cpi	r25, 0x02	; 2
     d20:	08 f4       	brcc	.+2      	; 0xd24 <_fpadd_parts+0x1a>
     d22:	39 c1       	rjmp	.+626    	; 0xf96 <_fpadd_parts+0x28c>
     d24:	eb 01       	movw	r28, r22
     d26:	88 81       	ld	r24, Y
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	08 f4       	brcc	.+2      	; 0xd2e <_fpadd_parts+0x24>
     d2c:	33 c1       	rjmp	.+614    	; 0xf94 <_fpadd_parts+0x28a>
     d2e:	94 30       	cpi	r25, 0x04	; 4
     d30:	69 f4       	brne	.+26     	; 0xd4c <_fpadd_parts+0x42>
     d32:	84 30       	cpi	r24, 0x04	; 4
     d34:	09 f0       	breq	.+2      	; 0xd38 <_fpadd_parts+0x2e>
     d36:	2f c1       	rjmp	.+606    	; 0xf96 <_fpadd_parts+0x28c>
     d38:	11 96       	adiw	r26, 0x01	; 1
     d3a:	9c 91       	ld	r25, X
     d3c:	11 97       	sbiw	r26, 0x01	; 1
     d3e:	89 81       	ldd	r24, Y+1	; 0x01
     d40:	98 17       	cp	r25, r24
     d42:	09 f4       	brne	.+2      	; 0xd46 <_fpadd_parts+0x3c>
     d44:	28 c1       	rjmp	.+592    	; 0xf96 <_fpadd_parts+0x28c>
     d46:	a6 ef       	ldi	r26, 0xF6	; 246
     d48:	b1 e0       	ldi	r27, 0x01	; 1
     d4a:	25 c1       	rjmp	.+586    	; 0xf96 <_fpadd_parts+0x28c>
     d4c:	84 30       	cpi	r24, 0x04	; 4
     d4e:	09 f4       	brne	.+2      	; 0xd52 <_fpadd_parts+0x48>
     d50:	21 c1       	rjmp	.+578    	; 0xf94 <_fpadd_parts+0x28a>
     d52:	82 30       	cpi	r24, 0x02	; 2
     d54:	a9 f4       	brne	.+42     	; 0xd80 <_fpadd_parts+0x76>
     d56:	92 30       	cpi	r25, 0x02	; 2
     d58:	09 f0       	breq	.+2      	; 0xd5c <_fpadd_parts+0x52>
     d5a:	1d c1       	rjmp	.+570    	; 0xf96 <_fpadd_parts+0x28c>
     d5c:	9a 01       	movw	r18, r20
     d5e:	ad 01       	movw	r20, r26
     d60:	88 e0       	ldi	r24, 0x08	; 8
     d62:	ea 01       	movw	r28, r20
     d64:	09 90       	ld	r0, Y+
     d66:	ae 01       	movw	r20, r28
     d68:	e9 01       	movw	r28, r18
     d6a:	09 92       	st	Y+, r0
     d6c:	9e 01       	movw	r18, r28
     d6e:	81 50       	subi	r24, 0x01	; 1
     d70:	c1 f7       	brne	.-16     	; 0xd62 <_fpadd_parts+0x58>
     d72:	e2 01       	movw	r28, r4
     d74:	89 81       	ldd	r24, Y+1	; 0x01
     d76:	11 96       	adiw	r26, 0x01	; 1
     d78:	9c 91       	ld	r25, X
     d7a:	89 23       	and	r24, r25
     d7c:	81 83       	std	Z+1, r24	; 0x01
     d7e:	08 c1       	rjmp	.+528    	; 0xf90 <_fpadd_parts+0x286>
     d80:	92 30       	cpi	r25, 0x02	; 2
     d82:	09 f4       	brne	.+2      	; 0xd86 <_fpadd_parts+0x7c>
     d84:	07 c1       	rjmp	.+526    	; 0xf94 <_fpadd_parts+0x28a>
     d86:	12 96       	adiw	r26, 0x02	; 2
     d88:	2d 90       	ld	r2, X+
     d8a:	3c 90       	ld	r3, X
     d8c:	13 97       	sbiw	r26, 0x03	; 3
     d8e:	eb 01       	movw	r28, r22
     d90:	8a 81       	ldd	r24, Y+2	; 0x02
     d92:	9b 81       	ldd	r25, Y+3	; 0x03
     d94:	14 96       	adiw	r26, 0x04	; 4
     d96:	ad 90       	ld	r10, X+
     d98:	bd 90       	ld	r11, X+
     d9a:	cd 90       	ld	r12, X+
     d9c:	dc 90       	ld	r13, X
     d9e:	17 97       	sbiw	r26, 0x07	; 7
     da0:	ec 80       	ldd	r14, Y+4	; 0x04
     da2:	fd 80       	ldd	r15, Y+5	; 0x05
     da4:	0e 81       	ldd	r16, Y+6	; 0x06
     da6:	1f 81       	ldd	r17, Y+7	; 0x07
     da8:	91 01       	movw	r18, r2
     daa:	28 1b       	sub	r18, r24
     dac:	39 0b       	sbc	r19, r25
     dae:	b9 01       	movw	r22, r18
     db0:	37 ff       	sbrs	r19, 7
     db2:	04 c0       	rjmp	.+8      	; 0xdbc <_fpadd_parts+0xb2>
     db4:	66 27       	eor	r22, r22
     db6:	77 27       	eor	r23, r23
     db8:	62 1b       	sub	r22, r18
     dba:	73 0b       	sbc	r23, r19
     dbc:	60 32       	cpi	r22, 0x20	; 32
     dbe:	71 05       	cpc	r23, r1
     dc0:	0c f0       	brlt	.+2      	; 0xdc4 <_fpadd_parts+0xba>
     dc2:	61 c0       	rjmp	.+194    	; 0xe86 <_fpadd_parts+0x17c>
     dc4:	12 16       	cp	r1, r18
     dc6:	13 06       	cpc	r1, r19
     dc8:	6c f5       	brge	.+90     	; 0xe24 <_fpadd_parts+0x11a>
     dca:	37 01       	movw	r6, r14
     dcc:	48 01       	movw	r8, r16
     dce:	06 2e       	mov	r0, r22
     dd0:	04 c0       	rjmp	.+8      	; 0xdda <_fpadd_parts+0xd0>
     dd2:	96 94       	lsr	r9
     dd4:	87 94       	ror	r8
     dd6:	77 94       	ror	r7
     dd8:	67 94       	ror	r6
     dda:	0a 94       	dec	r0
     ddc:	d2 f7       	brpl	.-12     	; 0xdd2 <_fpadd_parts+0xc8>
     dde:	21 e0       	ldi	r18, 0x01	; 1
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	40 e0       	ldi	r20, 0x00	; 0
     de4:	50 e0       	ldi	r21, 0x00	; 0
     de6:	04 c0       	rjmp	.+8      	; 0xdf0 <_fpadd_parts+0xe6>
     de8:	22 0f       	add	r18, r18
     dea:	33 1f       	adc	r19, r19
     dec:	44 1f       	adc	r20, r20
     dee:	55 1f       	adc	r21, r21
     df0:	6a 95       	dec	r22
     df2:	d2 f7       	brpl	.-12     	; 0xde8 <_fpadd_parts+0xde>
     df4:	21 50       	subi	r18, 0x01	; 1
     df6:	30 40       	sbci	r19, 0x00	; 0
     df8:	40 40       	sbci	r20, 0x00	; 0
     dfa:	50 40       	sbci	r21, 0x00	; 0
     dfc:	2e 21       	and	r18, r14
     dfe:	3f 21       	and	r19, r15
     e00:	40 23       	and	r20, r16
     e02:	51 23       	and	r21, r17
     e04:	21 15       	cp	r18, r1
     e06:	31 05       	cpc	r19, r1
     e08:	41 05       	cpc	r20, r1
     e0a:	51 05       	cpc	r21, r1
     e0c:	21 f0       	breq	.+8      	; 0xe16 <_fpadd_parts+0x10c>
     e0e:	21 e0       	ldi	r18, 0x01	; 1
     e10:	30 e0       	ldi	r19, 0x00	; 0
     e12:	40 e0       	ldi	r20, 0x00	; 0
     e14:	50 e0       	ldi	r21, 0x00	; 0
     e16:	79 01       	movw	r14, r18
     e18:	8a 01       	movw	r16, r20
     e1a:	e6 28       	or	r14, r6
     e1c:	f7 28       	or	r15, r7
     e1e:	08 29       	or	r16, r8
     e20:	19 29       	or	r17, r9
     e22:	3c c0       	rjmp	.+120    	; 0xe9c <_fpadd_parts+0x192>
     e24:	23 2b       	or	r18, r19
     e26:	d1 f1       	breq	.+116    	; 0xe9c <_fpadd_parts+0x192>
     e28:	26 0e       	add	r2, r22
     e2a:	37 1e       	adc	r3, r23
     e2c:	35 01       	movw	r6, r10
     e2e:	46 01       	movw	r8, r12
     e30:	06 2e       	mov	r0, r22
     e32:	04 c0       	rjmp	.+8      	; 0xe3c <_fpadd_parts+0x132>
     e34:	96 94       	lsr	r9
     e36:	87 94       	ror	r8
     e38:	77 94       	ror	r7
     e3a:	67 94       	ror	r6
     e3c:	0a 94       	dec	r0
     e3e:	d2 f7       	brpl	.-12     	; 0xe34 <_fpadd_parts+0x12a>
     e40:	21 e0       	ldi	r18, 0x01	; 1
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	50 e0       	ldi	r21, 0x00	; 0
     e48:	04 c0       	rjmp	.+8      	; 0xe52 <_fpadd_parts+0x148>
     e4a:	22 0f       	add	r18, r18
     e4c:	33 1f       	adc	r19, r19
     e4e:	44 1f       	adc	r20, r20
     e50:	55 1f       	adc	r21, r21
     e52:	6a 95       	dec	r22
     e54:	d2 f7       	brpl	.-12     	; 0xe4a <_fpadd_parts+0x140>
     e56:	21 50       	subi	r18, 0x01	; 1
     e58:	30 40       	sbci	r19, 0x00	; 0
     e5a:	40 40       	sbci	r20, 0x00	; 0
     e5c:	50 40       	sbci	r21, 0x00	; 0
     e5e:	2a 21       	and	r18, r10
     e60:	3b 21       	and	r19, r11
     e62:	4c 21       	and	r20, r12
     e64:	5d 21       	and	r21, r13
     e66:	21 15       	cp	r18, r1
     e68:	31 05       	cpc	r19, r1
     e6a:	41 05       	cpc	r20, r1
     e6c:	51 05       	cpc	r21, r1
     e6e:	21 f0       	breq	.+8      	; 0xe78 <_fpadd_parts+0x16e>
     e70:	21 e0       	ldi	r18, 0x01	; 1
     e72:	30 e0       	ldi	r19, 0x00	; 0
     e74:	40 e0       	ldi	r20, 0x00	; 0
     e76:	50 e0       	ldi	r21, 0x00	; 0
     e78:	59 01       	movw	r10, r18
     e7a:	6a 01       	movw	r12, r20
     e7c:	a6 28       	or	r10, r6
     e7e:	b7 28       	or	r11, r7
     e80:	c8 28       	or	r12, r8
     e82:	d9 28       	or	r13, r9
     e84:	0b c0       	rjmp	.+22     	; 0xe9c <_fpadd_parts+0x192>
     e86:	82 15       	cp	r24, r2
     e88:	93 05       	cpc	r25, r3
     e8a:	2c f0       	brlt	.+10     	; 0xe96 <_fpadd_parts+0x18c>
     e8c:	1c 01       	movw	r2, r24
     e8e:	aa 24       	eor	r10, r10
     e90:	bb 24       	eor	r11, r11
     e92:	65 01       	movw	r12, r10
     e94:	03 c0       	rjmp	.+6      	; 0xe9c <_fpadd_parts+0x192>
     e96:	ee 24       	eor	r14, r14
     e98:	ff 24       	eor	r15, r15
     e9a:	87 01       	movw	r16, r14
     e9c:	11 96       	adiw	r26, 0x01	; 1
     e9e:	9c 91       	ld	r25, X
     ea0:	d2 01       	movw	r26, r4
     ea2:	11 96       	adiw	r26, 0x01	; 1
     ea4:	8c 91       	ld	r24, X
     ea6:	98 17       	cp	r25, r24
     ea8:	09 f4       	brne	.+2      	; 0xeac <_fpadd_parts+0x1a2>
     eaa:	45 c0       	rjmp	.+138    	; 0xf36 <_fpadd_parts+0x22c>
     eac:	99 23       	and	r25, r25
     eae:	39 f0       	breq	.+14     	; 0xebe <_fpadd_parts+0x1b4>
     eb0:	a8 01       	movw	r20, r16
     eb2:	97 01       	movw	r18, r14
     eb4:	2a 19       	sub	r18, r10
     eb6:	3b 09       	sbc	r19, r11
     eb8:	4c 09       	sbc	r20, r12
     eba:	5d 09       	sbc	r21, r13
     ebc:	06 c0       	rjmp	.+12     	; 0xeca <_fpadd_parts+0x1c0>
     ebe:	a6 01       	movw	r20, r12
     ec0:	95 01       	movw	r18, r10
     ec2:	2e 19       	sub	r18, r14
     ec4:	3f 09       	sbc	r19, r15
     ec6:	40 0b       	sbc	r20, r16
     ec8:	51 0b       	sbc	r21, r17
     eca:	57 fd       	sbrc	r21, 7
     ecc:	08 c0       	rjmp	.+16     	; 0xede <_fpadd_parts+0x1d4>
     ece:	11 82       	std	Z+1, r1	; 0x01
     ed0:	33 82       	std	Z+3, r3	; 0x03
     ed2:	22 82       	std	Z+2, r2	; 0x02
     ed4:	24 83       	std	Z+4, r18	; 0x04
     ed6:	35 83       	std	Z+5, r19	; 0x05
     ed8:	46 83       	std	Z+6, r20	; 0x06
     eda:	57 83       	std	Z+7, r21	; 0x07
     edc:	1d c0       	rjmp	.+58     	; 0xf18 <_fpadd_parts+0x20e>
     ede:	81 e0       	ldi	r24, 0x01	; 1
     ee0:	81 83       	std	Z+1, r24	; 0x01
     ee2:	33 82       	std	Z+3, r3	; 0x03
     ee4:	22 82       	std	Z+2, r2	; 0x02
     ee6:	88 27       	eor	r24, r24
     ee8:	99 27       	eor	r25, r25
     eea:	dc 01       	movw	r26, r24
     eec:	82 1b       	sub	r24, r18
     eee:	93 0b       	sbc	r25, r19
     ef0:	a4 0b       	sbc	r26, r20
     ef2:	b5 0b       	sbc	r27, r21
     ef4:	84 83       	std	Z+4, r24	; 0x04
     ef6:	95 83       	std	Z+5, r25	; 0x05
     ef8:	a6 83       	std	Z+6, r26	; 0x06
     efa:	b7 83       	std	Z+7, r27	; 0x07
     efc:	0d c0       	rjmp	.+26     	; 0xf18 <_fpadd_parts+0x20e>
     efe:	22 0f       	add	r18, r18
     f00:	33 1f       	adc	r19, r19
     f02:	44 1f       	adc	r20, r20
     f04:	55 1f       	adc	r21, r21
     f06:	24 83       	std	Z+4, r18	; 0x04
     f08:	35 83       	std	Z+5, r19	; 0x05
     f0a:	46 83       	std	Z+6, r20	; 0x06
     f0c:	57 83       	std	Z+7, r21	; 0x07
     f0e:	82 81       	ldd	r24, Z+2	; 0x02
     f10:	93 81       	ldd	r25, Z+3	; 0x03
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	93 83       	std	Z+3, r25	; 0x03
     f16:	82 83       	std	Z+2, r24	; 0x02
     f18:	24 81       	ldd	r18, Z+4	; 0x04
     f1a:	35 81       	ldd	r19, Z+5	; 0x05
     f1c:	46 81       	ldd	r20, Z+6	; 0x06
     f1e:	57 81       	ldd	r21, Z+7	; 0x07
     f20:	da 01       	movw	r26, r20
     f22:	c9 01       	movw	r24, r18
     f24:	01 97       	sbiw	r24, 0x01	; 1
     f26:	a1 09       	sbc	r26, r1
     f28:	b1 09       	sbc	r27, r1
     f2a:	8f 5f       	subi	r24, 0xFF	; 255
     f2c:	9f 4f       	sbci	r25, 0xFF	; 255
     f2e:	af 4f       	sbci	r26, 0xFF	; 255
     f30:	bf 43       	sbci	r27, 0x3F	; 63
     f32:	28 f3       	brcs	.-54     	; 0xefe <_fpadd_parts+0x1f4>
     f34:	0b c0       	rjmp	.+22     	; 0xf4c <_fpadd_parts+0x242>
     f36:	91 83       	std	Z+1, r25	; 0x01
     f38:	33 82       	std	Z+3, r3	; 0x03
     f3a:	22 82       	std	Z+2, r2	; 0x02
     f3c:	ea 0c       	add	r14, r10
     f3e:	fb 1c       	adc	r15, r11
     f40:	0c 1d       	adc	r16, r12
     f42:	1d 1d       	adc	r17, r13
     f44:	e4 82       	std	Z+4, r14	; 0x04
     f46:	f5 82       	std	Z+5, r15	; 0x05
     f48:	06 83       	std	Z+6, r16	; 0x06
     f4a:	17 83       	std	Z+7, r17	; 0x07
     f4c:	83 e0       	ldi	r24, 0x03	; 3
     f4e:	80 83       	st	Z, r24
     f50:	24 81       	ldd	r18, Z+4	; 0x04
     f52:	35 81       	ldd	r19, Z+5	; 0x05
     f54:	46 81       	ldd	r20, Z+6	; 0x06
     f56:	57 81       	ldd	r21, Z+7	; 0x07
     f58:	57 ff       	sbrs	r21, 7
     f5a:	1a c0       	rjmp	.+52     	; 0xf90 <_fpadd_parts+0x286>
     f5c:	c9 01       	movw	r24, r18
     f5e:	aa 27       	eor	r26, r26
     f60:	97 fd       	sbrc	r25, 7
     f62:	a0 95       	com	r26
     f64:	ba 2f       	mov	r27, r26
     f66:	81 70       	andi	r24, 0x01	; 1
     f68:	90 70       	andi	r25, 0x00	; 0
     f6a:	a0 70       	andi	r26, 0x00	; 0
     f6c:	b0 70       	andi	r27, 0x00	; 0
     f6e:	56 95       	lsr	r21
     f70:	47 95       	ror	r20
     f72:	37 95       	ror	r19
     f74:	27 95       	ror	r18
     f76:	82 2b       	or	r24, r18
     f78:	93 2b       	or	r25, r19
     f7a:	a4 2b       	or	r26, r20
     f7c:	b5 2b       	or	r27, r21
     f7e:	84 83       	std	Z+4, r24	; 0x04
     f80:	95 83       	std	Z+5, r25	; 0x05
     f82:	a6 83       	std	Z+6, r26	; 0x06
     f84:	b7 83       	std	Z+7, r27	; 0x07
     f86:	82 81       	ldd	r24, Z+2	; 0x02
     f88:	93 81       	ldd	r25, Z+3	; 0x03
     f8a:	01 96       	adiw	r24, 0x01	; 1
     f8c:	93 83       	std	Z+3, r25	; 0x03
     f8e:	82 83       	std	Z+2, r24	; 0x02
     f90:	df 01       	movw	r26, r30
     f92:	01 c0       	rjmp	.+2      	; 0xf96 <_fpadd_parts+0x28c>
     f94:	d2 01       	movw	r26, r4
     f96:	cd 01       	movw	r24, r26
     f98:	cd b7       	in	r28, 0x3d	; 61
     f9a:	de b7       	in	r29, 0x3e	; 62
     f9c:	e2 e1       	ldi	r30, 0x12	; 18
     f9e:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__epilogue_restores__>

00000fa2 <__subsf3>:
     fa2:	a0 e2       	ldi	r26, 0x20	; 32
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	e7 ed       	ldi	r30, 0xD7	; 215
     fa8:	f7 e0       	ldi	r31, 0x07	; 7
     faa:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__prologue_saves__+0x18>
     fae:	69 83       	std	Y+1, r22	; 0x01
     fb0:	7a 83       	std	Y+2, r23	; 0x02
     fb2:	8b 83       	std	Y+3, r24	; 0x03
     fb4:	9c 83       	std	Y+4, r25	; 0x04
     fb6:	2d 83       	std	Y+5, r18	; 0x05
     fb8:	3e 83       	std	Y+6, r19	; 0x06
     fba:	4f 83       	std	Y+7, r20	; 0x07
     fbc:	58 87       	std	Y+8, r21	; 0x08
     fbe:	e9 e0       	ldi	r30, 0x09	; 9
     fc0:	ee 2e       	mov	r14, r30
     fc2:	f1 2c       	mov	r15, r1
     fc4:	ec 0e       	add	r14, r28
     fc6:	fd 1e       	adc	r15, r29
     fc8:	ce 01       	movw	r24, r28
     fca:	01 96       	adiw	r24, 0x01	; 1
     fcc:	b7 01       	movw	r22, r14
     fce:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__unpack_f>
     fd2:	8e 01       	movw	r16, r28
     fd4:	0f 5e       	subi	r16, 0xEF	; 239
     fd6:	1f 4f       	sbci	r17, 0xFF	; 255
     fd8:	ce 01       	movw	r24, r28
     fda:	05 96       	adiw	r24, 0x05	; 5
     fdc:	b8 01       	movw	r22, r16
     fde:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__unpack_f>
     fe2:	8a 89       	ldd	r24, Y+18	; 0x12
     fe4:	91 e0       	ldi	r25, 0x01	; 1
     fe6:	89 27       	eor	r24, r25
     fe8:	8a 8b       	std	Y+18, r24	; 0x12
     fea:	c7 01       	movw	r24, r14
     fec:	b8 01       	movw	r22, r16
     fee:	ae 01       	movw	r20, r28
     ff0:	47 5e       	subi	r20, 0xE7	; 231
     ff2:	5f 4f       	sbci	r21, 0xFF	; 255
     ff4:	0e 94 85 06 	call	0xd0a	; 0xd0a <_fpadd_parts>
     ff8:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__pack_f>
     ffc:	a0 96       	adiw	r28, 0x20	; 32
     ffe:	e6 e0       	ldi	r30, 0x06	; 6
    1000:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <__epilogue_restores__+0x18>

00001004 <__addsf3>:
    1004:	a0 e2       	ldi	r26, 0x20	; 32
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e8 e0       	ldi	r30, 0x08	; 8
    100a:	f8 e0       	ldi	r31, 0x08	; 8
    100c:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__prologue_saves__+0x18>
    1010:	69 83       	std	Y+1, r22	; 0x01
    1012:	7a 83       	std	Y+2, r23	; 0x02
    1014:	8b 83       	std	Y+3, r24	; 0x03
    1016:	9c 83       	std	Y+4, r25	; 0x04
    1018:	2d 83       	std	Y+5, r18	; 0x05
    101a:	3e 83       	std	Y+6, r19	; 0x06
    101c:	4f 83       	std	Y+7, r20	; 0x07
    101e:	58 87       	std	Y+8, r21	; 0x08
    1020:	f9 e0       	ldi	r31, 0x09	; 9
    1022:	ef 2e       	mov	r14, r31
    1024:	f1 2c       	mov	r15, r1
    1026:	ec 0e       	add	r14, r28
    1028:	fd 1e       	adc	r15, r29
    102a:	ce 01       	movw	r24, r28
    102c:	01 96       	adiw	r24, 0x01	; 1
    102e:	b7 01       	movw	r22, r14
    1030:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__unpack_f>
    1034:	8e 01       	movw	r16, r28
    1036:	0f 5e       	subi	r16, 0xEF	; 239
    1038:	1f 4f       	sbci	r17, 0xFF	; 255
    103a:	ce 01       	movw	r24, r28
    103c:	05 96       	adiw	r24, 0x05	; 5
    103e:	b8 01       	movw	r22, r16
    1040:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__unpack_f>
    1044:	c7 01       	movw	r24, r14
    1046:	b8 01       	movw	r22, r16
    1048:	ae 01       	movw	r20, r28
    104a:	47 5e       	subi	r20, 0xE7	; 231
    104c:	5f 4f       	sbci	r21, 0xFF	; 255
    104e:	0e 94 85 06 	call	0xd0a	; 0xd0a <_fpadd_parts>
    1052:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__pack_f>
    1056:	a0 96       	adiw	r28, 0x20	; 32
    1058:	e6 e0       	ldi	r30, 0x06	; 6
    105a:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <__epilogue_restores__+0x18>

0000105e <__mulsf3>:
    105e:	a0 e2       	ldi	r26, 0x20	; 32
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	e5 e3       	ldi	r30, 0x35	; 53
    1064:	f8 e0       	ldi	r31, 0x08	; 8
    1066:	0c 94 0c 0d 	jmp	0x1a18	; 0x1a18 <__prologue_saves__>
    106a:	69 83       	std	Y+1, r22	; 0x01
    106c:	7a 83       	std	Y+2, r23	; 0x02
    106e:	8b 83       	std	Y+3, r24	; 0x03
    1070:	9c 83       	std	Y+4, r25	; 0x04
    1072:	2d 83       	std	Y+5, r18	; 0x05
    1074:	3e 83       	std	Y+6, r19	; 0x06
    1076:	4f 83       	std	Y+7, r20	; 0x07
    1078:	58 87       	std	Y+8, r21	; 0x08
    107a:	ce 01       	movw	r24, r28
    107c:	01 96       	adiw	r24, 0x01	; 1
    107e:	be 01       	movw	r22, r28
    1080:	67 5f       	subi	r22, 0xF7	; 247
    1082:	7f 4f       	sbci	r23, 0xFF	; 255
    1084:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__unpack_f>
    1088:	ce 01       	movw	r24, r28
    108a:	05 96       	adiw	r24, 0x05	; 5
    108c:	be 01       	movw	r22, r28
    108e:	6f 5e       	subi	r22, 0xEF	; 239
    1090:	7f 4f       	sbci	r23, 0xFF	; 255
    1092:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__unpack_f>
    1096:	99 85       	ldd	r25, Y+9	; 0x09
    1098:	92 30       	cpi	r25, 0x02	; 2
    109a:	88 f0       	brcs	.+34     	; 0x10be <__mulsf3+0x60>
    109c:	89 89       	ldd	r24, Y+17	; 0x11
    109e:	82 30       	cpi	r24, 0x02	; 2
    10a0:	c8 f0       	brcs	.+50     	; 0x10d4 <__mulsf3+0x76>
    10a2:	94 30       	cpi	r25, 0x04	; 4
    10a4:	19 f4       	brne	.+6      	; 0x10ac <__mulsf3+0x4e>
    10a6:	82 30       	cpi	r24, 0x02	; 2
    10a8:	51 f4       	brne	.+20     	; 0x10be <__mulsf3+0x60>
    10aa:	04 c0       	rjmp	.+8      	; 0x10b4 <__mulsf3+0x56>
    10ac:	84 30       	cpi	r24, 0x04	; 4
    10ae:	29 f4       	brne	.+10     	; 0x10ba <__mulsf3+0x5c>
    10b0:	92 30       	cpi	r25, 0x02	; 2
    10b2:	81 f4       	brne	.+32     	; 0x10d4 <__mulsf3+0x76>
    10b4:	86 ef       	ldi	r24, 0xF6	; 246
    10b6:	91 e0       	ldi	r25, 0x01	; 1
    10b8:	c6 c0       	rjmp	.+396    	; 0x1246 <__mulsf3+0x1e8>
    10ba:	92 30       	cpi	r25, 0x02	; 2
    10bc:	49 f4       	brne	.+18     	; 0x10d0 <__mulsf3+0x72>
    10be:	20 e0       	ldi	r18, 0x00	; 0
    10c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    10c2:	8a 89       	ldd	r24, Y+18	; 0x12
    10c4:	98 13       	cpse	r25, r24
    10c6:	21 e0       	ldi	r18, 0x01	; 1
    10c8:	2a 87       	std	Y+10, r18	; 0x0a
    10ca:	ce 01       	movw	r24, r28
    10cc:	09 96       	adiw	r24, 0x09	; 9
    10ce:	bb c0       	rjmp	.+374    	; 0x1246 <__mulsf3+0x1e8>
    10d0:	82 30       	cpi	r24, 0x02	; 2
    10d2:	49 f4       	brne	.+18     	; 0x10e6 <__mulsf3+0x88>
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10d8:	8a 89       	ldd	r24, Y+18	; 0x12
    10da:	98 13       	cpse	r25, r24
    10dc:	21 e0       	ldi	r18, 0x01	; 1
    10de:	2a 8b       	std	Y+18, r18	; 0x12
    10e0:	ce 01       	movw	r24, r28
    10e2:	41 96       	adiw	r24, 0x11	; 17
    10e4:	b0 c0       	rjmp	.+352    	; 0x1246 <__mulsf3+0x1e8>
    10e6:	2d 84       	ldd	r2, Y+13	; 0x0d
    10e8:	3e 84       	ldd	r3, Y+14	; 0x0e
    10ea:	4f 84       	ldd	r4, Y+15	; 0x0f
    10ec:	58 88       	ldd	r5, Y+16	; 0x10
    10ee:	6d 88       	ldd	r6, Y+21	; 0x15
    10f0:	7e 88       	ldd	r7, Y+22	; 0x16
    10f2:	8f 88       	ldd	r8, Y+23	; 0x17
    10f4:	98 8c       	ldd	r9, Y+24	; 0x18
    10f6:	ee 24       	eor	r14, r14
    10f8:	ff 24       	eor	r15, r15
    10fa:	87 01       	movw	r16, r14
    10fc:	aa 24       	eor	r10, r10
    10fe:	bb 24       	eor	r11, r11
    1100:	65 01       	movw	r12, r10
    1102:	40 e0       	ldi	r20, 0x00	; 0
    1104:	50 e0       	ldi	r21, 0x00	; 0
    1106:	60 e0       	ldi	r22, 0x00	; 0
    1108:	70 e0       	ldi	r23, 0x00	; 0
    110a:	e0 e0       	ldi	r30, 0x00	; 0
    110c:	f0 e0       	ldi	r31, 0x00	; 0
    110e:	c1 01       	movw	r24, r2
    1110:	81 70       	andi	r24, 0x01	; 1
    1112:	90 70       	andi	r25, 0x00	; 0
    1114:	89 2b       	or	r24, r25
    1116:	e9 f0       	breq	.+58     	; 0x1152 <__mulsf3+0xf4>
    1118:	e6 0c       	add	r14, r6
    111a:	f7 1c       	adc	r15, r7
    111c:	08 1d       	adc	r16, r8
    111e:	19 1d       	adc	r17, r9
    1120:	9a 01       	movw	r18, r20
    1122:	ab 01       	movw	r20, r22
    1124:	2a 0d       	add	r18, r10
    1126:	3b 1d       	adc	r19, r11
    1128:	4c 1d       	adc	r20, r12
    112a:	5d 1d       	adc	r21, r13
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a0 e0       	ldi	r26, 0x00	; 0
    1132:	b0 e0       	ldi	r27, 0x00	; 0
    1134:	e6 14       	cp	r14, r6
    1136:	f7 04       	cpc	r15, r7
    1138:	08 05       	cpc	r16, r8
    113a:	19 05       	cpc	r17, r9
    113c:	20 f4       	brcc	.+8      	; 0x1146 <__mulsf3+0xe8>
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
    1142:	a0 e0       	ldi	r26, 0x00	; 0
    1144:	b0 e0       	ldi	r27, 0x00	; 0
    1146:	ba 01       	movw	r22, r20
    1148:	a9 01       	movw	r20, r18
    114a:	48 0f       	add	r20, r24
    114c:	59 1f       	adc	r21, r25
    114e:	6a 1f       	adc	r22, r26
    1150:	7b 1f       	adc	r23, r27
    1152:	aa 0c       	add	r10, r10
    1154:	bb 1c       	adc	r11, r11
    1156:	cc 1c       	adc	r12, r12
    1158:	dd 1c       	adc	r13, r13
    115a:	97 fe       	sbrs	r9, 7
    115c:	08 c0       	rjmp	.+16     	; 0x116e <__mulsf3+0x110>
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	a0 e0       	ldi	r26, 0x00	; 0
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	a8 2a       	or	r10, r24
    1168:	b9 2a       	or	r11, r25
    116a:	ca 2a       	or	r12, r26
    116c:	db 2a       	or	r13, r27
    116e:	31 96       	adiw	r30, 0x01	; 1
    1170:	e0 32       	cpi	r30, 0x20	; 32
    1172:	f1 05       	cpc	r31, r1
    1174:	49 f0       	breq	.+18     	; 0x1188 <__mulsf3+0x12a>
    1176:	66 0c       	add	r6, r6
    1178:	77 1c       	adc	r7, r7
    117a:	88 1c       	adc	r8, r8
    117c:	99 1c       	adc	r9, r9
    117e:	56 94       	lsr	r5
    1180:	47 94       	ror	r4
    1182:	37 94       	ror	r3
    1184:	27 94       	ror	r2
    1186:	c3 cf       	rjmp	.-122    	; 0x110e <__mulsf3+0xb0>
    1188:	fa 85       	ldd	r31, Y+10	; 0x0a
    118a:	ea 89       	ldd	r30, Y+18	; 0x12
    118c:	2b 89       	ldd	r18, Y+19	; 0x13
    118e:	3c 89       	ldd	r19, Y+20	; 0x14
    1190:	8b 85       	ldd	r24, Y+11	; 0x0b
    1192:	9c 85       	ldd	r25, Y+12	; 0x0c
    1194:	28 0f       	add	r18, r24
    1196:	39 1f       	adc	r19, r25
    1198:	2e 5f       	subi	r18, 0xFE	; 254
    119a:	3f 4f       	sbci	r19, 0xFF	; 255
    119c:	17 c0       	rjmp	.+46     	; 0x11cc <__mulsf3+0x16e>
    119e:	ca 01       	movw	r24, r20
    11a0:	81 70       	andi	r24, 0x01	; 1
    11a2:	90 70       	andi	r25, 0x00	; 0
    11a4:	89 2b       	or	r24, r25
    11a6:	61 f0       	breq	.+24     	; 0x11c0 <__mulsf3+0x162>
    11a8:	16 95       	lsr	r17
    11aa:	07 95       	ror	r16
    11ac:	f7 94       	ror	r15
    11ae:	e7 94       	ror	r14
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	a0 e0       	ldi	r26, 0x00	; 0
    11b6:	b0 e8       	ldi	r27, 0x80	; 128
    11b8:	e8 2a       	or	r14, r24
    11ba:	f9 2a       	or	r15, r25
    11bc:	0a 2b       	or	r16, r26
    11be:	1b 2b       	or	r17, r27
    11c0:	76 95       	lsr	r23
    11c2:	67 95       	ror	r22
    11c4:	57 95       	ror	r21
    11c6:	47 95       	ror	r20
    11c8:	2f 5f       	subi	r18, 0xFF	; 255
    11ca:	3f 4f       	sbci	r19, 0xFF	; 255
    11cc:	77 fd       	sbrc	r23, 7
    11ce:	e7 cf       	rjmp	.-50     	; 0x119e <__mulsf3+0x140>
    11d0:	0c c0       	rjmp	.+24     	; 0x11ea <__mulsf3+0x18c>
    11d2:	44 0f       	add	r20, r20
    11d4:	55 1f       	adc	r21, r21
    11d6:	66 1f       	adc	r22, r22
    11d8:	77 1f       	adc	r23, r23
    11da:	17 fd       	sbrc	r17, 7
    11dc:	41 60       	ori	r20, 0x01	; 1
    11de:	ee 0c       	add	r14, r14
    11e0:	ff 1c       	adc	r15, r15
    11e2:	00 1f       	adc	r16, r16
    11e4:	11 1f       	adc	r17, r17
    11e6:	21 50       	subi	r18, 0x01	; 1
    11e8:	30 40       	sbci	r19, 0x00	; 0
    11ea:	40 30       	cpi	r20, 0x00	; 0
    11ec:	90 e0       	ldi	r25, 0x00	; 0
    11ee:	59 07       	cpc	r21, r25
    11f0:	90 e0       	ldi	r25, 0x00	; 0
    11f2:	69 07       	cpc	r22, r25
    11f4:	90 e4       	ldi	r25, 0x40	; 64
    11f6:	79 07       	cpc	r23, r25
    11f8:	60 f3       	brcs	.-40     	; 0x11d2 <__mulsf3+0x174>
    11fa:	2b 8f       	std	Y+27, r18	; 0x1b
    11fc:	3c 8f       	std	Y+28, r19	; 0x1c
    11fe:	db 01       	movw	r26, r22
    1200:	ca 01       	movw	r24, r20
    1202:	8f 77       	andi	r24, 0x7F	; 127
    1204:	90 70       	andi	r25, 0x00	; 0
    1206:	a0 70       	andi	r26, 0x00	; 0
    1208:	b0 70       	andi	r27, 0x00	; 0
    120a:	80 34       	cpi	r24, 0x40	; 64
    120c:	91 05       	cpc	r25, r1
    120e:	a1 05       	cpc	r26, r1
    1210:	b1 05       	cpc	r27, r1
    1212:	61 f4       	brne	.+24     	; 0x122c <__mulsf3+0x1ce>
    1214:	47 fd       	sbrc	r20, 7
    1216:	0a c0       	rjmp	.+20     	; 0x122c <__mulsf3+0x1ce>
    1218:	e1 14       	cp	r14, r1
    121a:	f1 04       	cpc	r15, r1
    121c:	01 05       	cpc	r16, r1
    121e:	11 05       	cpc	r17, r1
    1220:	29 f0       	breq	.+10     	; 0x122c <__mulsf3+0x1ce>
    1222:	40 5c       	subi	r20, 0xC0	; 192
    1224:	5f 4f       	sbci	r21, 0xFF	; 255
    1226:	6f 4f       	sbci	r22, 0xFF	; 255
    1228:	7f 4f       	sbci	r23, 0xFF	; 255
    122a:	40 78       	andi	r20, 0x80	; 128
    122c:	1a 8e       	std	Y+26, r1	; 0x1a
    122e:	fe 17       	cp	r31, r30
    1230:	11 f0       	breq	.+4      	; 0x1236 <__mulsf3+0x1d8>
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	8a 8f       	std	Y+26, r24	; 0x1a
    1236:	4d 8f       	std	Y+29, r20	; 0x1d
    1238:	5e 8f       	std	Y+30, r21	; 0x1e
    123a:	6f 8f       	std	Y+31, r22	; 0x1f
    123c:	78 a3       	std	Y+32, r23	; 0x20
    123e:	83 e0       	ldi	r24, 0x03	; 3
    1240:	89 8f       	std	Y+25, r24	; 0x19
    1242:	ce 01       	movw	r24, r28
    1244:	49 96       	adiw	r24, 0x19	; 25
    1246:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__pack_f>
    124a:	a0 96       	adiw	r28, 0x20	; 32
    124c:	e2 e1       	ldi	r30, 0x12	; 18
    124e:	0c 94 28 0d 	jmp	0x1a50	; 0x1a50 <__epilogue_restores__>

00001252 <__divsf3>:
    1252:	a8 e1       	ldi	r26, 0x18	; 24
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	ef e2       	ldi	r30, 0x2F	; 47
    1258:	f9 e0       	ldi	r31, 0x09	; 9
    125a:	0c 94 14 0d 	jmp	0x1a28	; 0x1a28 <__prologue_saves__+0x10>
    125e:	69 83       	std	Y+1, r22	; 0x01
    1260:	7a 83       	std	Y+2, r23	; 0x02
    1262:	8b 83       	std	Y+3, r24	; 0x03
    1264:	9c 83       	std	Y+4, r25	; 0x04
    1266:	2d 83       	std	Y+5, r18	; 0x05
    1268:	3e 83       	std	Y+6, r19	; 0x06
    126a:	4f 83       	std	Y+7, r20	; 0x07
    126c:	58 87       	std	Y+8, r21	; 0x08
    126e:	b9 e0       	ldi	r27, 0x09	; 9
    1270:	eb 2e       	mov	r14, r27
    1272:	f1 2c       	mov	r15, r1
    1274:	ec 0e       	add	r14, r28
    1276:	fd 1e       	adc	r15, r29
    1278:	ce 01       	movw	r24, r28
    127a:	01 96       	adiw	r24, 0x01	; 1
    127c:	b7 01       	movw	r22, r14
    127e:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__unpack_f>
    1282:	8e 01       	movw	r16, r28
    1284:	0f 5e       	subi	r16, 0xEF	; 239
    1286:	1f 4f       	sbci	r17, 0xFF	; 255
    1288:	ce 01       	movw	r24, r28
    128a:	05 96       	adiw	r24, 0x05	; 5
    128c:	b8 01       	movw	r22, r16
    128e:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__unpack_f>
    1292:	29 85       	ldd	r18, Y+9	; 0x09
    1294:	22 30       	cpi	r18, 0x02	; 2
    1296:	08 f4       	brcc	.+2      	; 0x129a <__divsf3+0x48>
    1298:	7e c0       	rjmp	.+252    	; 0x1396 <__divsf3+0x144>
    129a:	39 89       	ldd	r19, Y+17	; 0x11
    129c:	32 30       	cpi	r19, 0x02	; 2
    129e:	10 f4       	brcc	.+4      	; 0x12a4 <__divsf3+0x52>
    12a0:	b8 01       	movw	r22, r16
    12a2:	7c c0       	rjmp	.+248    	; 0x139c <__divsf3+0x14a>
    12a4:	8a 85       	ldd	r24, Y+10	; 0x0a
    12a6:	9a 89       	ldd	r25, Y+18	; 0x12
    12a8:	89 27       	eor	r24, r25
    12aa:	8a 87       	std	Y+10, r24	; 0x0a
    12ac:	24 30       	cpi	r18, 0x04	; 4
    12ae:	11 f0       	breq	.+4      	; 0x12b4 <__divsf3+0x62>
    12b0:	22 30       	cpi	r18, 0x02	; 2
    12b2:	31 f4       	brne	.+12     	; 0x12c0 <__divsf3+0x6e>
    12b4:	23 17       	cp	r18, r19
    12b6:	09 f0       	breq	.+2      	; 0x12ba <__divsf3+0x68>
    12b8:	6e c0       	rjmp	.+220    	; 0x1396 <__divsf3+0x144>
    12ba:	66 ef       	ldi	r22, 0xF6	; 246
    12bc:	71 e0       	ldi	r23, 0x01	; 1
    12be:	6e c0       	rjmp	.+220    	; 0x139c <__divsf3+0x14a>
    12c0:	34 30       	cpi	r19, 0x04	; 4
    12c2:	39 f4       	brne	.+14     	; 0x12d2 <__divsf3+0x80>
    12c4:	1d 86       	std	Y+13, r1	; 0x0d
    12c6:	1e 86       	std	Y+14, r1	; 0x0e
    12c8:	1f 86       	std	Y+15, r1	; 0x0f
    12ca:	18 8a       	std	Y+16, r1	; 0x10
    12cc:	1c 86       	std	Y+12, r1	; 0x0c
    12ce:	1b 86       	std	Y+11, r1	; 0x0b
    12d0:	04 c0       	rjmp	.+8      	; 0x12da <__divsf3+0x88>
    12d2:	32 30       	cpi	r19, 0x02	; 2
    12d4:	21 f4       	brne	.+8      	; 0x12de <__divsf3+0x8c>
    12d6:	84 e0       	ldi	r24, 0x04	; 4
    12d8:	89 87       	std	Y+9, r24	; 0x09
    12da:	b7 01       	movw	r22, r14
    12dc:	5f c0       	rjmp	.+190    	; 0x139c <__divsf3+0x14a>
    12de:	2b 85       	ldd	r18, Y+11	; 0x0b
    12e0:	3c 85       	ldd	r19, Y+12	; 0x0c
    12e2:	8b 89       	ldd	r24, Y+19	; 0x13
    12e4:	9c 89       	ldd	r25, Y+20	; 0x14
    12e6:	28 1b       	sub	r18, r24
    12e8:	39 0b       	sbc	r19, r25
    12ea:	3c 87       	std	Y+12, r19	; 0x0c
    12ec:	2b 87       	std	Y+11, r18	; 0x0b
    12ee:	ed 84       	ldd	r14, Y+13	; 0x0d
    12f0:	fe 84       	ldd	r15, Y+14	; 0x0e
    12f2:	0f 85       	ldd	r16, Y+15	; 0x0f
    12f4:	18 89       	ldd	r17, Y+16	; 0x10
    12f6:	ad 88       	ldd	r10, Y+21	; 0x15
    12f8:	be 88       	ldd	r11, Y+22	; 0x16
    12fa:	cf 88       	ldd	r12, Y+23	; 0x17
    12fc:	d8 8c       	ldd	r13, Y+24	; 0x18
    12fe:	ea 14       	cp	r14, r10
    1300:	fb 04       	cpc	r15, r11
    1302:	0c 05       	cpc	r16, r12
    1304:	1d 05       	cpc	r17, r13
    1306:	40 f4       	brcc	.+16     	; 0x1318 <__divsf3+0xc6>
    1308:	ee 0c       	add	r14, r14
    130a:	ff 1c       	adc	r15, r15
    130c:	00 1f       	adc	r16, r16
    130e:	11 1f       	adc	r17, r17
    1310:	21 50       	subi	r18, 0x01	; 1
    1312:	30 40       	sbci	r19, 0x00	; 0
    1314:	3c 87       	std	Y+12, r19	; 0x0c
    1316:	2b 87       	std	Y+11, r18	; 0x0b
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	30 e0       	ldi	r19, 0x00	; 0
    131c:	40 e0       	ldi	r20, 0x00	; 0
    131e:	50 e0       	ldi	r21, 0x00	; 0
    1320:	80 e0       	ldi	r24, 0x00	; 0
    1322:	90 e0       	ldi	r25, 0x00	; 0
    1324:	a0 e0       	ldi	r26, 0x00	; 0
    1326:	b0 e4       	ldi	r27, 0x40	; 64
    1328:	60 e0       	ldi	r22, 0x00	; 0
    132a:	70 e0       	ldi	r23, 0x00	; 0
    132c:	ea 14       	cp	r14, r10
    132e:	fb 04       	cpc	r15, r11
    1330:	0c 05       	cpc	r16, r12
    1332:	1d 05       	cpc	r17, r13
    1334:	40 f0       	brcs	.+16     	; 0x1346 <__divsf3+0xf4>
    1336:	28 2b       	or	r18, r24
    1338:	39 2b       	or	r19, r25
    133a:	4a 2b       	or	r20, r26
    133c:	5b 2b       	or	r21, r27
    133e:	ea 18       	sub	r14, r10
    1340:	fb 08       	sbc	r15, r11
    1342:	0c 09       	sbc	r16, r12
    1344:	1d 09       	sbc	r17, r13
    1346:	b6 95       	lsr	r27
    1348:	a7 95       	ror	r26
    134a:	97 95       	ror	r25
    134c:	87 95       	ror	r24
    134e:	ee 0c       	add	r14, r14
    1350:	ff 1c       	adc	r15, r15
    1352:	00 1f       	adc	r16, r16
    1354:	11 1f       	adc	r17, r17
    1356:	6f 5f       	subi	r22, 0xFF	; 255
    1358:	7f 4f       	sbci	r23, 0xFF	; 255
    135a:	6f 31       	cpi	r22, 0x1F	; 31
    135c:	71 05       	cpc	r23, r1
    135e:	31 f7       	brne	.-52     	; 0x132c <__divsf3+0xda>
    1360:	da 01       	movw	r26, r20
    1362:	c9 01       	movw	r24, r18
    1364:	8f 77       	andi	r24, 0x7F	; 127
    1366:	90 70       	andi	r25, 0x00	; 0
    1368:	a0 70       	andi	r26, 0x00	; 0
    136a:	b0 70       	andi	r27, 0x00	; 0
    136c:	80 34       	cpi	r24, 0x40	; 64
    136e:	91 05       	cpc	r25, r1
    1370:	a1 05       	cpc	r26, r1
    1372:	b1 05       	cpc	r27, r1
    1374:	61 f4       	brne	.+24     	; 0x138e <__divsf3+0x13c>
    1376:	27 fd       	sbrc	r18, 7
    1378:	0a c0       	rjmp	.+20     	; 0x138e <__divsf3+0x13c>
    137a:	e1 14       	cp	r14, r1
    137c:	f1 04       	cpc	r15, r1
    137e:	01 05       	cpc	r16, r1
    1380:	11 05       	cpc	r17, r1
    1382:	29 f0       	breq	.+10     	; 0x138e <__divsf3+0x13c>
    1384:	20 5c       	subi	r18, 0xC0	; 192
    1386:	3f 4f       	sbci	r19, 0xFF	; 255
    1388:	4f 4f       	sbci	r20, 0xFF	; 255
    138a:	5f 4f       	sbci	r21, 0xFF	; 255
    138c:	20 78       	andi	r18, 0x80	; 128
    138e:	2d 87       	std	Y+13, r18	; 0x0d
    1390:	3e 87       	std	Y+14, r19	; 0x0e
    1392:	4f 87       	std	Y+15, r20	; 0x0f
    1394:	58 8b       	std	Y+16, r21	; 0x10
    1396:	be 01       	movw	r22, r28
    1398:	67 5f       	subi	r22, 0xF7	; 247
    139a:	7f 4f       	sbci	r23, 0xFF	; 255
    139c:	cb 01       	movw	r24, r22
    139e:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__pack_f>
    13a2:	68 96       	adiw	r28, 0x18	; 24
    13a4:	ea e0       	ldi	r30, 0x0A	; 10
    13a6:	0c 94 30 0d 	jmp	0x1a60	; 0x1a60 <__epilogue_restores__+0x10>

000013aa <__gtsf2>:
    13aa:	a8 e1       	ldi	r26, 0x18	; 24
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	eb ed       	ldi	r30, 0xDB	; 219
    13b0:	f9 e0       	ldi	r31, 0x09	; 9
    13b2:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__prologue_saves__+0x18>
    13b6:	69 83       	std	Y+1, r22	; 0x01
    13b8:	7a 83       	std	Y+2, r23	; 0x02
    13ba:	8b 83       	std	Y+3, r24	; 0x03
    13bc:	9c 83       	std	Y+4, r25	; 0x04
    13be:	2d 83       	std	Y+5, r18	; 0x05
    13c0:	3e 83       	std	Y+6, r19	; 0x06
    13c2:	4f 83       	std	Y+7, r20	; 0x07
    13c4:	58 87       	std	Y+8, r21	; 0x08
    13c6:	89 e0       	ldi	r24, 0x09	; 9
    13c8:	e8 2e       	mov	r14, r24
    13ca:	f1 2c       	mov	r15, r1
    13cc:	ec 0e       	add	r14, r28
    13ce:	fd 1e       	adc	r15, r29
    13d0:	ce 01       	movw	r24, r28
    13d2:	01 96       	adiw	r24, 0x01	; 1
    13d4:	b7 01       	movw	r22, r14
    13d6:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__unpack_f>
    13da:	8e 01       	movw	r16, r28
    13dc:	0f 5e       	subi	r16, 0xEF	; 239
    13de:	1f 4f       	sbci	r17, 0xFF	; 255
    13e0:	ce 01       	movw	r24, r28
    13e2:	05 96       	adiw	r24, 0x05	; 5
    13e4:	b8 01       	movw	r22, r16
    13e6:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__unpack_f>
    13ea:	89 85       	ldd	r24, Y+9	; 0x09
    13ec:	82 30       	cpi	r24, 0x02	; 2
    13ee:	40 f0       	brcs	.+16     	; 0x1400 <__gtsf2+0x56>
    13f0:	89 89       	ldd	r24, Y+17	; 0x11
    13f2:	82 30       	cpi	r24, 0x02	; 2
    13f4:	28 f0       	brcs	.+10     	; 0x1400 <__gtsf2+0x56>
    13f6:	c7 01       	movw	r24, r14
    13f8:	b8 01       	movw	r22, r16
    13fa:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__fpcmp_parts_f>
    13fe:	01 c0       	rjmp	.+2      	; 0x1402 <__gtsf2+0x58>
    1400:	8f ef       	ldi	r24, 0xFF	; 255
    1402:	68 96       	adiw	r28, 0x18	; 24
    1404:	e6 e0       	ldi	r30, 0x06	; 6
    1406:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <__epilogue_restores__+0x18>

0000140a <__gesf2>:
    140a:	a8 e1       	ldi	r26, 0x18	; 24
    140c:	b0 e0       	ldi	r27, 0x00	; 0
    140e:	eb e0       	ldi	r30, 0x0B	; 11
    1410:	fa e0       	ldi	r31, 0x0A	; 10
    1412:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__prologue_saves__+0x18>
    1416:	69 83       	std	Y+1, r22	; 0x01
    1418:	7a 83       	std	Y+2, r23	; 0x02
    141a:	8b 83       	std	Y+3, r24	; 0x03
    141c:	9c 83       	std	Y+4, r25	; 0x04
    141e:	2d 83       	std	Y+5, r18	; 0x05
    1420:	3e 83       	std	Y+6, r19	; 0x06
    1422:	4f 83       	std	Y+7, r20	; 0x07
    1424:	58 87       	std	Y+8, r21	; 0x08
    1426:	89 e0       	ldi	r24, 0x09	; 9
    1428:	e8 2e       	mov	r14, r24
    142a:	f1 2c       	mov	r15, r1
    142c:	ec 0e       	add	r14, r28
    142e:	fd 1e       	adc	r15, r29
    1430:	ce 01       	movw	r24, r28
    1432:	01 96       	adiw	r24, 0x01	; 1
    1434:	b7 01       	movw	r22, r14
    1436:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__unpack_f>
    143a:	8e 01       	movw	r16, r28
    143c:	0f 5e       	subi	r16, 0xEF	; 239
    143e:	1f 4f       	sbci	r17, 0xFF	; 255
    1440:	ce 01       	movw	r24, r28
    1442:	05 96       	adiw	r24, 0x05	; 5
    1444:	b8 01       	movw	r22, r16
    1446:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__unpack_f>
    144a:	89 85       	ldd	r24, Y+9	; 0x09
    144c:	82 30       	cpi	r24, 0x02	; 2
    144e:	40 f0       	brcs	.+16     	; 0x1460 <__gesf2+0x56>
    1450:	89 89       	ldd	r24, Y+17	; 0x11
    1452:	82 30       	cpi	r24, 0x02	; 2
    1454:	28 f0       	brcs	.+10     	; 0x1460 <__gesf2+0x56>
    1456:	c7 01       	movw	r24, r14
    1458:	b8 01       	movw	r22, r16
    145a:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__fpcmp_parts_f>
    145e:	01 c0       	rjmp	.+2      	; 0x1462 <__gesf2+0x58>
    1460:	8f ef       	ldi	r24, 0xFF	; 255
    1462:	68 96       	adiw	r28, 0x18	; 24
    1464:	e6 e0       	ldi	r30, 0x06	; 6
    1466:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <__epilogue_restores__+0x18>

0000146a <__ltsf2>:
    146a:	a8 e1       	ldi	r26, 0x18	; 24
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	eb e3       	ldi	r30, 0x3B	; 59
    1470:	fa e0       	ldi	r31, 0x0A	; 10
    1472:	0c 94 18 0d 	jmp	0x1a30	; 0x1a30 <__prologue_saves__+0x18>
    1476:	69 83       	std	Y+1, r22	; 0x01
    1478:	7a 83       	std	Y+2, r23	; 0x02
    147a:	8b 83       	std	Y+3, r24	; 0x03
    147c:	9c 83       	std	Y+4, r25	; 0x04
    147e:	2d 83       	std	Y+5, r18	; 0x05
    1480:	3e 83       	std	Y+6, r19	; 0x06
    1482:	4f 83       	std	Y+7, r20	; 0x07
    1484:	58 87       	std	Y+8, r21	; 0x08
    1486:	89 e0       	ldi	r24, 0x09	; 9
    1488:	e8 2e       	mov	r14, r24
    148a:	f1 2c       	mov	r15, r1
    148c:	ec 0e       	add	r14, r28
    148e:	fd 1e       	adc	r15, r29
    1490:	ce 01       	movw	r24, r28
    1492:	01 96       	adiw	r24, 0x01	; 1
    1494:	b7 01       	movw	r22, r14
    1496:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__unpack_f>
    149a:	8e 01       	movw	r16, r28
    149c:	0f 5e       	subi	r16, 0xEF	; 239
    149e:	1f 4f       	sbci	r17, 0xFF	; 255
    14a0:	ce 01       	movw	r24, r28
    14a2:	05 96       	adiw	r24, 0x05	; 5
    14a4:	b8 01       	movw	r22, r16
    14a6:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__unpack_f>
    14aa:	89 85       	ldd	r24, Y+9	; 0x09
    14ac:	82 30       	cpi	r24, 0x02	; 2
    14ae:	40 f0       	brcs	.+16     	; 0x14c0 <__ltsf2+0x56>
    14b0:	89 89       	ldd	r24, Y+17	; 0x11
    14b2:	82 30       	cpi	r24, 0x02	; 2
    14b4:	28 f0       	brcs	.+10     	; 0x14c0 <__ltsf2+0x56>
    14b6:	c7 01       	movw	r24, r14
    14b8:	b8 01       	movw	r22, r16
    14ba:	0e 94 b3 0c 	call	0x1966	; 0x1966 <__fpcmp_parts_f>
    14be:	01 c0       	rjmp	.+2      	; 0x14c2 <__ltsf2+0x58>
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	68 96       	adiw	r28, 0x18	; 24
    14c4:	e6 e0       	ldi	r30, 0x06	; 6
    14c6:	0c 94 34 0d 	jmp	0x1a68	; 0x1a68 <__epilogue_restores__+0x18>

000014ca <__floatsisf>:
    14ca:	a8 e0       	ldi	r26, 0x08	; 8
    14cc:	b0 e0       	ldi	r27, 0x00	; 0
    14ce:	eb e6       	ldi	r30, 0x6B	; 107
    14d0:	fa e0       	ldi	r31, 0x0A	; 10
    14d2:	0c 94 15 0d 	jmp	0x1a2a	; 0x1a2a <__prologue_saves__+0x12>
    14d6:	9b 01       	movw	r18, r22
    14d8:	ac 01       	movw	r20, r24
    14da:	83 e0       	ldi	r24, 0x03	; 3
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	da 01       	movw	r26, r20
    14e0:	c9 01       	movw	r24, r18
    14e2:	88 27       	eor	r24, r24
    14e4:	b7 fd       	sbrc	r27, 7
    14e6:	83 95       	inc	r24
    14e8:	99 27       	eor	r25, r25
    14ea:	aa 27       	eor	r26, r26
    14ec:	bb 27       	eor	r27, r27
    14ee:	b8 2e       	mov	r11, r24
    14f0:	21 15       	cp	r18, r1
    14f2:	31 05       	cpc	r19, r1
    14f4:	41 05       	cpc	r20, r1
    14f6:	51 05       	cpc	r21, r1
    14f8:	19 f4       	brne	.+6      	; 0x1500 <__floatsisf+0x36>
    14fa:	82 e0       	ldi	r24, 0x02	; 2
    14fc:	89 83       	std	Y+1, r24	; 0x01
    14fe:	3a c0       	rjmp	.+116    	; 0x1574 <__floatsisf+0xaa>
    1500:	88 23       	and	r24, r24
    1502:	a9 f0       	breq	.+42     	; 0x152e <__floatsisf+0x64>
    1504:	20 30       	cpi	r18, 0x00	; 0
    1506:	80 e0       	ldi	r24, 0x00	; 0
    1508:	38 07       	cpc	r19, r24
    150a:	80 e0       	ldi	r24, 0x00	; 0
    150c:	48 07       	cpc	r20, r24
    150e:	80 e8       	ldi	r24, 0x80	; 128
    1510:	58 07       	cpc	r21, r24
    1512:	29 f4       	brne	.+10     	; 0x151e <__floatsisf+0x54>
    1514:	60 e0       	ldi	r22, 0x00	; 0
    1516:	70 e0       	ldi	r23, 0x00	; 0
    1518:	80 e0       	ldi	r24, 0x00	; 0
    151a:	9f ec       	ldi	r25, 0xCF	; 207
    151c:	30 c0       	rjmp	.+96     	; 0x157e <__floatsisf+0xb4>
    151e:	ee 24       	eor	r14, r14
    1520:	ff 24       	eor	r15, r15
    1522:	87 01       	movw	r16, r14
    1524:	e2 1a       	sub	r14, r18
    1526:	f3 0a       	sbc	r15, r19
    1528:	04 0b       	sbc	r16, r20
    152a:	15 0b       	sbc	r17, r21
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <__floatsisf+0x68>
    152e:	79 01       	movw	r14, r18
    1530:	8a 01       	movw	r16, r20
    1532:	8e e1       	ldi	r24, 0x1E	; 30
    1534:	c8 2e       	mov	r12, r24
    1536:	d1 2c       	mov	r13, r1
    1538:	dc 82       	std	Y+4, r13	; 0x04
    153a:	cb 82       	std	Y+3, r12	; 0x03
    153c:	ed 82       	std	Y+5, r14	; 0x05
    153e:	fe 82       	std	Y+6, r15	; 0x06
    1540:	0f 83       	std	Y+7, r16	; 0x07
    1542:	18 87       	std	Y+8, r17	; 0x08
    1544:	c8 01       	movw	r24, r16
    1546:	b7 01       	movw	r22, r14
    1548:	0e 94 17 0b 	call	0x162e	; 0x162e <__clzsi2>
    154c:	01 97       	sbiw	r24, 0x01	; 1
    154e:	18 16       	cp	r1, r24
    1550:	19 06       	cpc	r1, r25
    1552:	84 f4       	brge	.+32     	; 0x1574 <__floatsisf+0xaa>
    1554:	08 2e       	mov	r0, r24
    1556:	04 c0       	rjmp	.+8      	; 0x1560 <__floatsisf+0x96>
    1558:	ee 0c       	add	r14, r14
    155a:	ff 1c       	adc	r15, r15
    155c:	00 1f       	adc	r16, r16
    155e:	11 1f       	adc	r17, r17
    1560:	0a 94       	dec	r0
    1562:	d2 f7       	brpl	.-12     	; 0x1558 <__floatsisf+0x8e>
    1564:	ed 82       	std	Y+5, r14	; 0x05
    1566:	fe 82       	std	Y+6, r15	; 0x06
    1568:	0f 83       	std	Y+7, r16	; 0x07
    156a:	18 87       	std	Y+8, r17	; 0x08
    156c:	c8 1a       	sub	r12, r24
    156e:	d9 0a       	sbc	r13, r25
    1570:	dc 82       	std	Y+4, r13	; 0x04
    1572:	cb 82       	std	Y+3, r12	; 0x03
    1574:	ba 82       	std	Y+2, r11	; 0x02
    1576:	ce 01       	movw	r24, r28
    1578:	01 96       	adiw	r24, 0x01	; 1
    157a:	0e 94 66 0b 	call	0x16cc	; 0x16cc <__pack_f>
    157e:	28 96       	adiw	r28, 0x08	; 8
    1580:	e9 e0       	ldi	r30, 0x09	; 9
    1582:	0c 94 31 0d 	jmp	0x1a62	; 0x1a62 <__epilogue_restores__+0x12>

00001586 <__fixsfsi>:
    1586:	ac e0       	ldi	r26, 0x0C	; 12
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	e9 ec       	ldi	r30, 0xC9	; 201
    158c:	fa e0       	ldi	r31, 0x0A	; 10
    158e:	0c 94 1c 0d 	jmp	0x1a38	; 0x1a38 <__prologue_saves__+0x20>
    1592:	69 83       	std	Y+1, r22	; 0x01
    1594:	7a 83       	std	Y+2, r23	; 0x02
    1596:	8b 83       	std	Y+3, r24	; 0x03
    1598:	9c 83       	std	Y+4, r25	; 0x04
    159a:	ce 01       	movw	r24, r28
    159c:	01 96       	adiw	r24, 0x01	; 1
    159e:	be 01       	movw	r22, r28
    15a0:	6b 5f       	subi	r22, 0xFB	; 251
    15a2:	7f 4f       	sbci	r23, 0xFF	; 255
    15a4:	0e 94 3b 0c 	call	0x1876	; 0x1876 <__unpack_f>
    15a8:	8d 81       	ldd	r24, Y+5	; 0x05
    15aa:	82 30       	cpi	r24, 0x02	; 2
    15ac:	61 f1       	breq	.+88     	; 0x1606 <__fixsfsi+0x80>
    15ae:	82 30       	cpi	r24, 0x02	; 2
    15b0:	50 f1       	brcs	.+84     	; 0x1606 <__fixsfsi+0x80>
    15b2:	84 30       	cpi	r24, 0x04	; 4
    15b4:	21 f4       	brne	.+8      	; 0x15be <__fixsfsi+0x38>
    15b6:	8e 81       	ldd	r24, Y+6	; 0x06
    15b8:	88 23       	and	r24, r24
    15ba:	51 f1       	breq	.+84     	; 0x1610 <__fixsfsi+0x8a>
    15bc:	2e c0       	rjmp	.+92     	; 0x161a <__fixsfsi+0x94>
    15be:	2f 81       	ldd	r18, Y+7	; 0x07
    15c0:	38 85       	ldd	r19, Y+8	; 0x08
    15c2:	37 fd       	sbrc	r19, 7
    15c4:	20 c0       	rjmp	.+64     	; 0x1606 <__fixsfsi+0x80>
    15c6:	6e 81       	ldd	r22, Y+6	; 0x06
    15c8:	2f 31       	cpi	r18, 0x1F	; 31
    15ca:	31 05       	cpc	r19, r1
    15cc:	1c f0       	brlt	.+6      	; 0x15d4 <__fixsfsi+0x4e>
    15ce:	66 23       	and	r22, r22
    15d0:	f9 f0       	breq	.+62     	; 0x1610 <__fixsfsi+0x8a>
    15d2:	23 c0       	rjmp	.+70     	; 0x161a <__fixsfsi+0x94>
    15d4:	8e e1       	ldi	r24, 0x1E	; 30
    15d6:	90 e0       	ldi	r25, 0x00	; 0
    15d8:	82 1b       	sub	r24, r18
    15da:	93 0b       	sbc	r25, r19
    15dc:	29 85       	ldd	r18, Y+9	; 0x09
    15de:	3a 85       	ldd	r19, Y+10	; 0x0a
    15e0:	4b 85       	ldd	r20, Y+11	; 0x0b
    15e2:	5c 85       	ldd	r21, Y+12	; 0x0c
    15e4:	04 c0       	rjmp	.+8      	; 0x15ee <__fixsfsi+0x68>
    15e6:	56 95       	lsr	r21
    15e8:	47 95       	ror	r20
    15ea:	37 95       	ror	r19
    15ec:	27 95       	ror	r18
    15ee:	8a 95       	dec	r24
    15f0:	d2 f7       	brpl	.-12     	; 0x15e6 <__fixsfsi+0x60>
    15f2:	66 23       	and	r22, r22
    15f4:	b1 f0       	breq	.+44     	; 0x1622 <__fixsfsi+0x9c>
    15f6:	50 95       	com	r21
    15f8:	40 95       	com	r20
    15fa:	30 95       	com	r19
    15fc:	21 95       	neg	r18
    15fe:	3f 4f       	sbci	r19, 0xFF	; 255
    1600:	4f 4f       	sbci	r20, 0xFF	; 255
    1602:	5f 4f       	sbci	r21, 0xFF	; 255
    1604:	0e c0       	rjmp	.+28     	; 0x1622 <__fixsfsi+0x9c>
    1606:	20 e0       	ldi	r18, 0x00	; 0
    1608:	30 e0       	ldi	r19, 0x00	; 0
    160a:	40 e0       	ldi	r20, 0x00	; 0
    160c:	50 e0       	ldi	r21, 0x00	; 0
    160e:	09 c0       	rjmp	.+18     	; 0x1622 <__fixsfsi+0x9c>
    1610:	2f ef       	ldi	r18, 0xFF	; 255
    1612:	3f ef       	ldi	r19, 0xFF	; 255
    1614:	4f ef       	ldi	r20, 0xFF	; 255
    1616:	5f e7       	ldi	r21, 0x7F	; 127
    1618:	04 c0       	rjmp	.+8      	; 0x1622 <__fixsfsi+0x9c>
    161a:	20 e0       	ldi	r18, 0x00	; 0
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	40 e0       	ldi	r20, 0x00	; 0
    1620:	50 e8       	ldi	r21, 0x80	; 128
    1622:	b9 01       	movw	r22, r18
    1624:	ca 01       	movw	r24, r20
    1626:	2c 96       	adiw	r28, 0x0c	; 12
    1628:	e2 e0       	ldi	r30, 0x02	; 2
    162a:	0c 94 38 0d 	jmp	0x1a70	; 0x1a70 <__epilogue_restores__+0x20>

0000162e <__clzsi2>:
    162e:	ef 92       	push	r14
    1630:	ff 92       	push	r15
    1632:	0f 93       	push	r16
    1634:	1f 93       	push	r17
    1636:	7b 01       	movw	r14, r22
    1638:	8c 01       	movw	r16, r24
    163a:	80 e0       	ldi	r24, 0x00	; 0
    163c:	e8 16       	cp	r14, r24
    163e:	80 e0       	ldi	r24, 0x00	; 0
    1640:	f8 06       	cpc	r15, r24
    1642:	81 e0       	ldi	r24, 0x01	; 1
    1644:	08 07       	cpc	r16, r24
    1646:	80 e0       	ldi	r24, 0x00	; 0
    1648:	18 07       	cpc	r17, r24
    164a:	88 f4       	brcc	.+34     	; 0x166e <__clzsi2+0x40>
    164c:	8f ef       	ldi	r24, 0xFF	; 255
    164e:	e8 16       	cp	r14, r24
    1650:	f1 04       	cpc	r15, r1
    1652:	01 05       	cpc	r16, r1
    1654:	11 05       	cpc	r17, r1
    1656:	31 f0       	breq	.+12     	; 0x1664 <__clzsi2+0x36>
    1658:	28 f0       	brcs	.+10     	; 0x1664 <__clzsi2+0x36>
    165a:	88 e0       	ldi	r24, 0x08	; 8
    165c:	90 e0       	ldi	r25, 0x00	; 0
    165e:	a0 e0       	ldi	r26, 0x00	; 0
    1660:	b0 e0       	ldi	r27, 0x00	; 0
    1662:	17 c0       	rjmp	.+46     	; 0x1692 <__clzsi2+0x64>
    1664:	80 e0       	ldi	r24, 0x00	; 0
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	a0 e0       	ldi	r26, 0x00	; 0
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	12 c0       	rjmp	.+36     	; 0x1692 <__clzsi2+0x64>
    166e:	80 e0       	ldi	r24, 0x00	; 0
    1670:	e8 16       	cp	r14, r24
    1672:	80 e0       	ldi	r24, 0x00	; 0
    1674:	f8 06       	cpc	r15, r24
    1676:	80 e0       	ldi	r24, 0x00	; 0
    1678:	08 07       	cpc	r16, r24
    167a:	81 e0       	ldi	r24, 0x01	; 1
    167c:	18 07       	cpc	r17, r24
    167e:	28 f0       	brcs	.+10     	; 0x168a <__clzsi2+0x5c>
    1680:	88 e1       	ldi	r24, 0x18	; 24
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	a0 e0       	ldi	r26, 0x00	; 0
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	04 c0       	rjmp	.+8      	; 0x1692 <__clzsi2+0x64>
    168a:	80 e1       	ldi	r24, 0x10	; 16
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	a0 e0       	ldi	r26, 0x00	; 0
    1690:	b0 e0       	ldi	r27, 0x00	; 0
    1692:	20 e2       	ldi	r18, 0x20	; 32
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	40 e0       	ldi	r20, 0x00	; 0
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	28 1b       	sub	r18, r24
    169c:	39 0b       	sbc	r19, r25
    169e:	4a 0b       	sbc	r20, r26
    16a0:	5b 0b       	sbc	r21, r27
    16a2:	04 c0       	rjmp	.+8      	; 0x16ac <__clzsi2+0x7e>
    16a4:	16 95       	lsr	r17
    16a6:	07 95       	ror	r16
    16a8:	f7 94       	ror	r15
    16aa:	e7 94       	ror	r14
    16ac:	8a 95       	dec	r24
    16ae:	d2 f7       	brpl	.-12     	; 0x16a4 <__clzsi2+0x76>
    16b0:	f7 01       	movw	r30, r14
    16b2:	e2 50       	subi	r30, 0x02	; 2
    16b4:	fe 4f       	sbci	r31, 0xFE	; 254
    16b6:	80 81       	ld	r24, Z
    16b8:	28 1b       	sub	r18, r24
    16ba:	31 09       	sbc	r19, r1
    16bc:	41 09       	sbc	r20, r1
    16be:	51 09       	sbc	r21, r1
    16c0:	c9 01       	movw	r24, r18
    16c2:	1f 91       	pop	r17
    16c4:	0f 91       	pop	r16
    16c6:	ff 90       	pop	r15
    16c8:	ef 90       	pop	r14
    16ca:	08 95       	ret

000016cc <__pack_f>:
    16cc:	df 92       	push	r13
    16ce:	ef 92       	push	r14
    16d0:	ff 92       	push	r15
    16d2:	0f 93       	push	r16
    16d4:	1f 93       	push	r17
    16d6:	fc 01       	movw	r30, r24
    16d8:	e4 80       	ldd	r14, Z+4	; 0x04
    16da:	f5 80       	ldd	r15, Z+5	; 0x05
    16dc:	06 81       	ldd	r16, Z+6	; 0x06
    16de:	17 81       	ldd	r17, Z+7	; 0x07
    16e0:	d1 80       	ldd	r13, Z+1	; 0x01
    16e2:	80 81       	ld	r24, Z
    16e4:	82 30       	cpi	r24, 0x02	; 2
    16e6:	48 f4       	brcc	.+18     	; 0x16fa <__pack_f+0x2e>
    16e8:	80 e0       	ldi	r24, 0x00	; 0
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	a0 e1       	ldi	r26, 0x10	; 16
    16ee:	b0 e0       	ldi	r27, 0x00	; 0
    16f0:	e8 2a       	or	r14, r24
    16f2:	f9 2a       	or	r15, r25
    16f4:	0a 2b       	or	r16, r26
    16f6:	1b 2b       	or	r17, r27
    16f8:	a5 c0       	rjmp	.+330    	; 0x1844 <__pack_f+0x178>
    16fa:	84 30       	cpi	r24, 0x04	; 4
    16fc:	09 f4       	brne	.+2      	; 0x1700 <__pack_f+0x34>
    16fe:	9f c0       	rjmp	.+318    	; 0x183e <__pack_f+0x172>
    1700:	82 30       	cpi	r24, 0x02	; 2
    1702:	21 f4       	brne	.+8      	; 0x170c <__pack_f+0x40>
    1704:	ee 24       	eor	r14, r14
    1706:	ff 24       	eor	r15, r15
    1708:	87 01       	movw	r16, r14
    170a:	05 c0       	rjmp	.+10     	; 0x1716 <__pack_f+0x4a>
    170c:	e1 14       	cp	r14, r1
    170e:	f1 04       	cpc	r15, r1
    1710:	01 05       	cpc	r16, r1
    1712:	11 05       	cpc	r17, r1
    1714:	19 f4       	brne	.+6      	; 0x171c <__pack_f+0x50>
    1716:	e0 e0       	ldi	r30, 0x00	; 0
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	96 c0       	rjmp	.+300    	; 0x1848 <__pack_f+0x17c>
    171c:	62 81       	ldd	r22, Z+2	; 0x02
    171e:	73 81       	ldd	r23, Z+3	; 0x03
    1720:	9f ef       	ldi	r25, 0xFF	; 255
    1722:	62 38       	cpi	r22, 0x82	; 130
    1724:	79 07       	cpc	r23, r25
    1726:	0c f0       	brlt	.+2      	; 0x172a <__pack_f+0x5e>
    1728:	5b c0       	rjmp	.+182    	; 0x17e0 <__pack_f+0x114>
    172a:	22 e8       	ldi	r18, 0x82	; 130
    172c:	3f ef       	ldi	r19, 0xFF	; 255
    172e:	26 1b       	sub	r18, r22
    1730:	37 0b       	sbc	r19, r23
    1732:	2a 31       	cpi	r18, 0x1A	; 26
    1734:	31 05       	cpc	r19, r1
    1736:	2c f0       	brlt	.+10     	; 0x1742 <__pack_f+0x76>
    1738:	20 e0       	ldi	r18, 0x00	; 0
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	40 e0       	ldi	r20, 0x00	; 0
    173e:	50 e0       	ldi	r21, 0x00	; 0
    1740:	2a c0       	rjmp	.+84     	; 0x1796 <__pack_f+0xca>
    1742:	b8 01       	movw	r22, r16
    1744:	a7 01       	movw	r20, r14
    1746:	02 2e       	mov	r0, r18
    1748:	04 c0       	rjmp	.+8      	; 0x1752 <__pack_f+0x86>
    174a:	76 95       	lsr	r23
    174c:	67 95       	ror	r22
    174e:	57 95       	ror	r21
    1750:	47 95       	ror	r20
    1752:	0a 94       	dec	r0
    1754:	d2 f7       	brpl	.-12     	; 0x174a <__pack_f+0x7e>
    1756:	81 e0       	ldi	r24, 0x01	; 1
    1758:	90 e0       	ldi	r25, 0x00	; 0
    175a:	a0 e0       	ldi	r26, 0x00	; 0
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	04 c0       	rjmp	.+8      	; 0x1768 <__pack_f+0x9c>
    1760:	88 0f       	add	r24, r24
    1762:	99 1f       	adc	r25, r25
    1764:	aa 1f       	adc	r26, r26
    1766:	bb 1f       	adc	r27, r27
    1768:	2a 95       	dec	r18
    176a:	d2 f7       	brpl	.-12     	; 0x1760 <__pack_f+0x94>
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	a1 09       	sbc	r26, r1
    1770:	b1 09       	sbc	r27, r1
    1772:	8e 21       	and	r24, r14
    1774:	9f 21       	and	r25, r15
    1776:	a0 23       	and	r26, r16
    1778:	b1 23       	and	r27, r17
    177a:	00 97       	sbiw	r24, 0x00	; 0
    177c:	a1 05       	cpc	r26, r1
    177e:	b1 05       	cpc	r27, r1
    1780:	21 f0       	breq	.+8      	; 0x178a <__pack_f+0xbe>
    1782:	81 e0       	ldi	r24, 0x01	; 1
    1784:	90 e0       	ldi	r25, 0x00	; 0
    1786:	a0 e0       	ldi	r26, 0x00	; 0
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	9a 01       	movw	r18, r20
    178c:	ab 01       	movw	r20, r22
    178e:	28 2b       	or	r18, r24
    1790:	39 2b       	or	r19, r25
    1792:	4a 2b       	or	r20, r26
    1794:	5b 2b       	or	r21, r27
    1796:	da 01       	movw	r26, r20
    1798:	c9 01       	movw	r24, r18
    179a:	8f 77       	andi	r24, 0x7F	; 127
    179c:	90 70       	andi	r25, 0x00	; 0
    179e:	a0 70       	andi	r26, 0x00	; 0
    17a0:	b0 70       	andi	r27, 0x00	; 0
    17a2:	80 34       	cpi	r24, 0x40	; 64
    17a4:	91 05       	cpc	r25, r1
    17a6:	a1 05       	cpc	r26, r1
    17a8:	b1 05       	cpc	r27, r1
    17aa:	39 f4       	brne	.+14     	; 0x17ba <__pack_f+0xee>
    17ac:	27 ff       	sbrs	r18, 7
    17ae:	09 c0       	rjmp	.+18     	; 0x17c2 <__pack_f+0xf6>
    17b0:	20 5c       	subi	r18, 0xC0	; 192
    17b2:	3f 4f       	sbci	r19, 0xFF	; 255
    17b4:	4f 4f       	sbci	r20, 0xFF	; 255
    17b6:	5f 4f       	sbci	r21, 0xFF	; 255
    17b8:	04 c0       	rjmp	.+8      	; 0x17c2 <__pack_f+0xf6>
    17ba:	21 5c       	subi	r18, 0xC1	; 193
    17bc:	3f 4f       	sbci	r19, 0xFF	; 255
    17be:	4f 4f       	sbci	r20, 0xFF	; 255
    17c0:	5f 4f       	sbci	r21, 0xFF	; 255
    17c2:	e0 e0       	ldi	r30, 0x00	; 0
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	20 30       	cpi	r18, 0x00	; 0
    17c8:	a0 e0       	ldi	r26, 0x00	; 0
    17ca:	3a 07       	cpc	r19, r26
    17cc:	a0 e0       	ldi	r26, 0x00	; 0
    17ce:	4a 07       	cpc	r20, r26
    17d0:	a0 e4       	ldi	r26, 0x40	; 64
    17d2:	5a 07       	cpc	r21, r26
    17d4:	10 f0       	brcs	.+4      	; 0x17da <__pack_f+0x10e>
    17d6:	e1 e0       	ldi	r30, 0x01	; 1
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	79 01       	movw	r14, r18
    17dc:	8a 01       	movw	r16, r20
    17de:	27 c0       	rjmp	.+78     	; 0x182e <__pack_f+0x162>
    17e0:	60 38       	cpi	r22, 0x80	; 128
    17e2:	71 05       	cpc	r23, r1
    17e4:	64 f5       	brge	.+88     	; 0x183e <__pack_f+0x172>
    17e6:	fb 01       	movw	r30, r22
    17e8:	e1 58       	subi	r30, 0x81	; 129
    17ea:	ff 4f       	sbci	r31, 0xFF	; 255
    17ec:	d8 01       	movw	r26, r16
    17ee:	c7 01       	movw	r24, r14
    17f0:	8f 77       	andi	r24, 0x7F	; 127
    17f2:	90 70       	andi	r25, 0x00	; 0
    17f4:	a0 70       	andi	r26, 0x00	; 0
    17f6:	b0 70       	andi	r27, 0x00	; 0
    17f8:	80 34       	cpi	r24, 0x40	; 64
    17fa:	91 05       	cpc	r25, r1
    17fc:	a1 05       	cpc	r26, r1
    17fe:	b1 05       	cpc	r27, r1
    1800:	39 f4       	brne	.+14     	; 0x1810 <__pack_f+0x144>
    1802:	e7 fe       	sbrs	r14, 7
    1804:	0d c0       	rjmp	.+26     	; 0x1820 <__pack_f+0x154>
    1806:	80 e4       	ldi	r24, 0x40	; 64
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	a0 e0       	ldi	r26, 0x00	; 0
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	04 c0       	rjmp	.+8      	; 0x1818 <__pack_f+0x14c>
    1810:	8f e3       	ldi	r24, 0x3F	; 63
    1812:	90 e0       	ldi	r25, 0x00	; 0
    1814:	a0 e0       	ldi	r26, 0x00	; 0
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e8 0e       	add	r14, r24
    181a:	f9 1e       	adc	r15, r25
    181c:	0a 1f       	adc	r16, r26
    181e:	1b 1f       	adc	r17, r27
    1820:	17 ff       	sbrs	r17, 7
    1822:	05 c0       	rjmp	.+10     	; 0x182e <__pack_f+0x162>
    1824:	16 95       	lsr	r17
    1826:	07 95       	ror	r16
    1828:	f7 94       	ror	r15
    182a:	e7 94       	ror	r14
    182c:	31 96       	adiw	r30, 0x01	; 1
    182e:	87 e0       	ldi	r24, 0x07	; 7
    1830:	16 95       	lsr	r17
    1832:	07 95       	ror	r16
    1834:	f7 94       	ror	r15
    1836:	e7 94       	ror	r14
    1838:	8a 95       	dec	r24
    183a:	d1 f7       	brne	.-12     	; 0x1830 <__pack_f+0x164>
    183c:	05 c0       	rjmp	.+10     	; 0x1848 <__pack_f+0x17c>
    183e:	ee 24       	eor	r14, r14
    1840:	ff 24       	eor	r15, r15
    1842:	87 01       	movw	r16, r14
    1844:	ef ef       	ldi	r30, 0xFF	; 255
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	6e 2f       	mov	r22, r30
    184a:	67 95       	ror	r22
    184c:	66 27       	eor	r22, r22
    184e:	67 95       	ror	r22
    1850:	90 2f       	mov	r25, r16
    1852:	9f 77       	andi	r25, 0x7F	; 127
    1854:	d7 94       	ror	r13
    1856:	dd 24       	eor	r13, r13
    1858:	d7 94       	ror	r13
    185a:	8e 2f       	mov	r24, r30
    185c:	86 95       	lsr	r24
    185e:	49 2f       	mov	r20, r25
    1860:	46 2b       	or	r20, r22
    1862:	58 2f       	mov	r21, r24
    1864:	5d 29       	or	r21, r13
    1866:	b7 01       	movw	r22, r14
    1868:	ca 01       	movw	r24, r20
    186a:	1f 91       	pop	r17
    186c:	0f 91       	pop	r16
    186e:	ff 90       	pop	r15
    1870:	ef 90       	pop	r14
    1872:	df 90       	pop	r13
    1874:	08 95       	ret

00001876 <__unpack_f>:
    1876:	fc 01       	movw	r30, r24
    1878:	db 01       	movw	r26, r22
    187a:	40 81       	ld	r20, Z
    187c:	51 81       	ldd	r21, Z+1	; 0x01
    187e:	22 81       	ldd	r18, Z+2	; 0x02
    1880:	62 2f       	mov	r22, r18
    1882:	6f 77       	andi	r22, 0x7F	; 127
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	22 1f       	adc	r18, r18
    1888:	22 27       	eor	r18, r18
    188a:	22 1f       	adc	r18, r18
    188c:	93 81       	ldd	r25, Z+3	; 0x03
    188e:	89 2f       	mov	r24, r25
    1890:	88 0f       	add	r24, r24
    1892:	82 2b       	or	r24, r18
    1894:	28 2f       	mov	r18, r24
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	99 1f       	adc	r25, r25
    189a:	99 27       	eor	r25, r25
    189c:	99 1f       	adc	r25, r25
    189e:	11 96       	adiw	r26, 0x01	; 1
    18a0:	9c 93       	st	X, r25
    18a2:	11 97       	sbiw	r26, 0x01	; 1
    18a4:	21 15       	cp	r18, r1
    18a6:	31 05       	cpc	r19, r1
    18a8:	a9 f5       	brne	.+106    	; 0x1914 <__unpack_f+0x9e>
    18aa:	41 15       	cp	r20, r1
    18ac:	51 05       	cpc	r21, r1
    18ae:	61 05       	cpc	r22, r1
    18b0:	71 05       	cpc	r23, r1
    18b2:	11 f4       	brne	.+4      	; 0x18b8 <__unpack_f+0x42>
    18b4:	82 e0       	ldi	r24, 0x02	; 2
    18b6:	37 c0       	rjmp	.+110    	; 0x1926 <__unpack_f+0xb0>
    18b8:	82 e8       	ldi	r24, 0x82	; 130
    18ba:	9f ef       	ldi	r25, 0xFF	; 255
    18bc:	13 96       	adiw	r26, 0x03	; 3
    18be:	9c 93       	st	X, r25
    18c0:	8e 93       	st	-X, r24
    18c2:	12 97       	sbiw	r26, 0x02	; 2
    18c4:	9a 01       	movw	r18, r20
    18c6:	ab 01       	movw	r20, r22
    18c8:	67 e0       	ldi	r22, 0x07	; 7
    18ca:	22 0f       	add	r18, r18
    18cc:	33 1f       	adc	r19, r19
    18ce:	44 1f       	adc	r20, r20
    18d0:	55 1f       	adc	r21, r21
    18d2:	6a 95       	dec	r22
    18d4:	d1 f7       	brne	.-12     	; 0x18ca <__unpack_f+0x54>
    18d6:	83 e0       	ldi	r24, 0x03	; 3
    18d8:	8c 93       	st	X, r24
    18da:	0d c0       	rjmp	.+26     	; 0x18f6 <__unpack_f+0x80>
    18dc:	22 0f       	add	r18, r18
    18de:	33 1f       	adc	r19, r19
    18e0:	44 1f       	adc	r20, r20
    18e2:	55 1f       	adc	r21, r21
    18e4:	12 96       	adiw	r26, 0x02	; 2
    18e6:	8d 91       	ld	r24, X+
    18e8:	9c 91       	ld	r25, X
    18ea:	13 97       	sbiw	r26, 0x03	; 3
    18ec:	01 97       	sbiw	r24, 0x01	; 1
    18ee:	13 96       	adiw	r26, 0x03	; 3
    18f0:	9c 93       	st	X, r25
    18f2:	8e 93       	st	-X, r24
    18f4:	12 97       	sbiw	r26, 0x02	; 2
    18f6:	20 30       	cpi	r18, 0x00	; 0
    18f8:	80 e0       	ldi	r24, 0x00	; 0
    18fa:	38 07       	cpc	r19, r24
    18fc:	80 e0       	ldi	r24, 0x00	; 0
    18fe:	48 07       	cpc	r20, r24
    1900:	80 e4       	ldi	r24, 0x40	; 64
    1902:	58 07       	cpc	r21, r24
    1904:	58 f3       	brcs	.-42     	; 0x18dc <__unpack_f+0x66>
    1906:	14 96       	adiw	r26, 0x04	; 4
    1908:	2d 93       	st	X+, r18
    190a:	3d 93       	st	X+, r19
    190c:	4d 93       	st	X+, r20
    190e:	5c 93       	st	X, r21
    1910:	17 97       	sbiw	r26, 0x07	; 7
    1912:	08 95       	ret
    1914:	2f 3f       	cpi	r18, 0xFF	; 255
    1916:	31 05       	cpc	r19, r1
    1918:	79 f4       	brne	.+30     	; 0x1938 <__unpack_f+0xc2>
    191a:	41 15       	cp	r20, r1
    191c:	51 05       	cpc	r21, r1
    191e:	61 05       	cpc	r22, r1
    1920:	71 05       	cpc	r23, r1
    1922:	19 f4       	brne	.+6      	; 0x192a <__unpack_f+0xb4>
    1924:	84 e0       	ldi	r24, 0x04	; 4
    1926:	8c 93       	st	X, r24
    1928:	08 95       	ret
    192a:	64 ff       	sbrs	r22, 4
    192c:	03 c0       	rjmp	.+6      	; 0x1934 <__unpack_f+0xbe>
    192e:	81 e0       	ldi	r24, 0x01	; 1
    1930:	8c 93       	st	X, r24
    1932:	12 c0       	rjmp	.+36     	; 0x1958 <__unpack_f+0xe2>
    1934:	1c 92       	st	X, r1
    1936:	10 c0       	rjmp	.+32     	; 0x1958 <__unpack_f+0xe2>
    1938:	2f 57       	subi	r18, 0x7F	; 127
    193a:	30 40       	sbci	r19, 0x00	; 0
    193c:	13 96       	adiw	r26, 0x03	; 3
    193e:	3c 93       	st	X, r19
    1940:	2e 93       	st	-X, r18
    1942:	12 97       	sbiw	r26, 0x02	; 2
    1944:	83 e0       	ldi	r24, 0x03	; 3
    1946:	8c 93       	st	X, r24
    1948:	87 e0       	ldi	r24, 0x07	; 7
    194a:	44 0f       	add	r20, r20
    194c:	55 1f       	adc	r21, r21
    194e:	66 1f       	adc	r22, r22
    1950:	77 1f       	adc	r23, r23
    1952:	8a 95       	dec	r24
    1954:	d1 f7       	brne	.-12     	; 0x194a <__unpack_f+0xd4>
    1956:	70 64       	ori	r23, 0x40	; 64
    1958:	14 96       	adiw	r26, 0x04	; 4
    195a:	4d 93       	st	X+, r20
    195c:	5d 93       	st	X+, r21
    195e:	6d 93       	st	X+, r22
    1960:	7c 93       	st	X, r23
    1962:	17 97       	sbiw	r26, 0x07	; 7
    1964:	08 95       	ret

00001966 <__fpcmp_parts_f>:
    1966:	1f 93       	push	r17
    1968:	dc 01       	movw	r26, r24
    196a:	fb 01       	movw	r30, r22
    196c:	9c 91       	ld	r25, X
    196e:	92 30       	cpi	r25, 0x02	; 2
    1970:	08 f4       	brcc	.+2      	; 0x1974 <__fpcmp_parts_f+0xe>
    1972:	47 c0       	rjmp	.+142    	; 0x1a02 <__fpcmp_parts_f+0x9c>
    1974:	80 81       	ld	r24, Z
    1976:	82 30       	cpi	r24, 0x02	; 2
    1978:	08 f4       	brcc	.+2      	; 0x197c <__fpcmp_parts_f+0x16>
    197a:	43 c0       	rjmp	.+134    	; 0x1a02 <__fpcmp_parts_f+0x9c>
    197c:	94 30       	cpi	r25, 0x04	; 4
    197e:	51 f4       	brne	.+20     	; 0x1994 <__fpcmp_parts_f+0x2e>
    1980:	11 96       	adiw	r26, 0x01	; 1
    1982:	1c 91       	ld	r17, X
    1984:	84 30       	cpi	r24, 0x04	; 4
    1986:	99 f5       	brne	.+102    	; 0x19ee <__fpcmp_parts_f+0x88>
    1988:	81 81       	ldd	r24, Z+1	; 0x01
    198a:	68 2f       	mov	r22, r24
    198c:	70 e0       	ldi	r23, 0x00	; 0
    198e:	61 1b       	sub	r22, r17
    1990:	71 09       	sbc	r23, r1
    1992:	3f c0       	rjmp	.+126    	; 0x1a12 <__fpcmp_parts_f+0xac>
    1994:	84 30       	cpi	r24, 0x04	; 4
    1996:	21 f0       	breq	.+8      	; 0x19a0 <__fpcmp_parts_f+0x3a>
    1998:	92 30       	cpi	r25, 0x02	; 2
    199a:	31 f4       	brne	.+12     	; 0x19a8 <__fpcmp_parts_f+0x42>
    199c:	82 30       	cpi	r24, 0x02	; 2
    199e:	b9 f1       	breq	.+110    	; 0x1a0e <__fpcmp_parts_f+0xa8>
    19a0:	81 81       	ldd	r24, Z+1	; 0x01
    19a2:	88 23       	and	r24, r24
    19a4:	89 f1       	breq	.+98     	; 0x1a08 <__fpcmp_parts_f+0xa2>
    19a6:	2d c0       	rjmp	.+90     	; 0x1a02 <__fpcmp_parts_f+0x9c>
    19a8:	11 96       	adiw	r26, 0x01	; 1
    19aa:	1c 91       	ld	r17, X
    19ac:	11 97       	sbiw	r26, 0x01	; 1
    19ae:	82 30       	cpi	r24, 0x02	; 2
    19b0:	f1 f0       	breq	.+60     	; 0x19ee <__fpcmp_parts_f+0x88>
    19b2:	81 81       	ldd	r24, Z+1	; 0x01
    19b4:	18 17       	cp	r17, r24
    19b6:	d9 f4       	brne	.+54     	; 0x19ee <__fpcmp_parts_f+0x88>
    19b8:	12 96       	adiw	r26, 0x02	; 2
    19ba:	2d 91       	ld	r18, X+
    19bc:	3c 91       	ld	r19, X
    19be:	13 97       	sbiw	r26, 0x03	; 3
    19c0:	82 81       	ldd	r24, Z+2	; 0x02
    19c2:	93 81       	ldd	r25, Z+3	; 0x03
    19c4:	82 17       	cp	r24, r18
    19c6:	93 07       	cpc	r25, r19
    19c8:	94 f0       	brlt	.+36     	; 0x19ee <__fpcmp_parts_f+0x88>
    19ca:	28 17       	cp	r18, r24
    19cc:	39 07       	cpc	r19, r25
    19ce:	bc f0       	brlt	.+46     	; 0x19fe <__fpcmp_parts_f+0x98>
    19d0:	14 96       	adiw	r26, 0x04	; 4
    19d2:	8d 91       	ld	r24, X+
    19d4:	9d 91       	ld	r25, X+
    19d6:	0d 90       	ld	r0, X+
    19d8:	bc 91       	ld	r27, X
    19da:	a0 2d       	mov	r26, r0
    19dc:	24 81       	ldd	r18, Z+4	; 0x04
    19de:	35 81       	ldd	r19, Z+5	; 0x05
    19e0:	46 81       	ldd	r20, Z+6	; 0x06
    19e2:	57 81       	ldd	r21, Z+7	; 0x07
    19e4:	28 17       	cp	r18, r24
    19e6:	39 07       	cpc	r19, r25
    19e8:	4a 07       	cpc	r20, r26
    19ea:	5b 07       	cpc	r21, r27
    19ec:	18 f4       	brcc	.+6      	; 0x19f4 <__fpcmp_parts_f+0x8e>
    19ee:	11 23       	and	r17, r17
    19f0:	41 f0       	breq	.+16     	; 0x1a02 <__fpcmp_parts_f+0x9c>
    19f2:	0a c0       	rjmp	.+20     	; 0x1a08 <__fpcmp_parts_f+0xa2>
    19f4:	82 17       	cp	r24, r18
    19f6:	93 07       	cpc	r25, r19
    19f8:	a4 07       	cpc	r26, r20
    19fa:	b5 07       	cpc	r27, r21
    19fc:	40 f4       	brcc	.+16     	; 0x1a0e <__fpcmp_parts_f+0xa8>
    19fe:	11 23       	and	r17, r17
    1a00:	19 f0       	breq	.+6      	; 0x1a08 <__fpcmp_parts_f+0xa2>
    1a02:	61 e0       	ldi	r22, 0x01	; 1
    1a04:	70 e0       	ldi	r23, 0x00	; 0
    1a06:	05 c0       	rjmp	.+10     	; 0x1a12 <__fpcmp_parts_f+0xac>
    1a08:	6f ef       	ldi	r22, 0xFF	; 255
    1a0a:	7f ef       	ldi	r23, 0xFF	; 255
    1a0c:	02 c0       	rjmp	.+4      	; 0x1a12 <__fpcmp_parts_f+0xac>
    1a0e:	60 e0       	ldi	r22, 0x00	; 0
    1a10:	70 e0       	ldi	r23, 0x00	; 0
    1a12:	cb 01       	movw	r24, r22
    1a14:	1f 91       	pop	r17
    1a16:	08 95       	ret

00001a18 <__prologue_saves__>:
    1a18:	2f 92       	push	r2
    1a1a:	3f 92       	push	r3
    1a1c:	4f 92       	push	r4
    1a1e:	5f 92       	push	r5
    1a20:	6f 92       	push	r6
    1a22:	7f 92       	push	r7
    1a24:	8f 92       	push	r8
    1a26:	9f 92       	push	r9
    1a28:	af 92       	push	r10
    1a2a:	bf 92       	push	r11
    1a2c:	cf 92       	push	r12
    1a2e:	df 92       	push	r13
    1a30:	ef 92       	push	r14
    1a32:	ff 92       	push	r15
    1a34:	0f 93       	push	r16
    1a36:	1f 93       	push	r17
    1a38:	cf 93       	push	r28
    1a3a:	df 93       	push	r29
    1a3c:	cd b7       	in	r28, 0x3d	; 61
    1a3e:	de b7       	in	r29, 0x3e	; 62
    1a40:	ca 1b       	sub	r28, r26
    1a42:	db 0b       	sbc	r29, r27
    1a44:	0f b6       	in	r0, 0x3f	; 63
    1a46:	f8 94       	cli
    1a48:	de bf       	out	0x3e, r29	; 62
    1a4a:	0f be       	out	0x3f, r0	; 63
    1a4c:	cd bf       	out	0x3d, r28	; 61
    1a4e:	09 94       	ijmp

00001a50 <__epilogue_restores__>:
    1a50:	2a 88       	ldd	r2, Y+18	; 0x12
    1a52:	39 88       	ldd	r3, Y+17	; 0x11
    1a54:	48 88       	ldd	r4, Y+16	; 0x10
    1a56:	5f 84       	ldd	r5, Y+15	; 0x0f
    1a58:	6e 84       	ldd	r6, Y+14	; 0x0e
    1a5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    1a5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    1a5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1a60:	aa 84       	ldd	r10, Y+10	; 0x0a
    1a62:	b9 84       	ldd	r11, Y+9	; 0x09
    1a64:	c8 84       	ldd	r12, Y+8	; 0x08
    1a66:	df 80       	ldd	r13, Y+7	; 0x07
    1a68:	ee 80       	ldd	r14, Y+6	; 0x06
    1a6a:	fd 80       	ldd	r15, Y+5	; 0x05
    1a6c:	0c 81       	ldd	r16, Y+4	; 0x04
    1a6e:	1b 81       	ldd	r17, Y+3	; 0x03
    1a70:	aa 81       	ldd	r26, Y+2	; 0x02
    1a72:	b9 81       	ldd	r27, Y+1	; 0x01
    1a74:	ce 0f       	add	r28, r30
    1a76:	d1 1d       	adc	r29, r1
    1a78:	0f b6       	in	r0, 0x3f	; 63
    1a7a:	f8 94       	cli
    1a7c:	de bf       	out	0x3e, r29	; 62
    1a7e:	0f be       	out	0x3f, r0	; 63
    1a80:	cd bf       	out	0x3d, r28	; 61
    1a82:	ed 01       	movw	r28, r26
    1a84:	08 95       	ret

00001a86 <itoa>:
    1a86:	fb 01       	movw	r30, r22
    1a88:	9f 01       	movw	r18, r30
    1a8a:	e8 94       	clt
    1a8c:	42 30       	cpi	r20, 0x02	; 2
    1a8e:	c4 f0       	brlt	.+48     	; 0x1ac0 <itoa+0x3a>
    1a90:	45 32       	cpi	r20, 0x25	; 37
    1a92:	b4 f4       	brge	.+44     	; 0x1ac0 <itoa+0x3a>
    1a94:	4a 30       	cpi	r20, 0x0A	; 10
    1a96:	29 f4       	brne	.+10     	; 0x1aa2 <itoa+0x1c>
    1a98:	97 fb       	bst	r25, 7
    1a9a:	1e f4       	brtc	.+6      	; 0x1aa2 <itoa+0x1c>
    1a9c:	90 95       	com	r25
    1a9e:	81 95       	neg	r24
    1aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    1aa2:	64 2f       	mov	r22, r20
    1aa4:	77 27       	eor	r23, r23
    1aa6:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__udivmodhi4>
    1aaa:	80 5d       	subi	r24, 0xD0	; 208
    1aac:	8a 33       	cpi	r24, 0x3A	; 58
    1aae:	0c f0       	brlt	.+2      	; 0x1ab2 <itoa+0x2c>
    1ab0:	89 5d       	subi	r24, 0xD9	; 217
    1ab2:	81 93       	st	Z+, r24
    1ab4:	cb 01       	movw	r24, r22
    1ab6:	00 97       	sbiw	r24, 0x00	; 0
    1ab8:	a1 f7       	brne	.-24     	; 0x1aa2 <itoa+0x1c>
    1aba:	16 f4       	brtc	.+4      	; 0x1ac0 <itoa+0x3a>
    1abc:	5d e2       	ldi	r21, 0x2D	; 45
    1abe:	51 93       	st	Z+, r21
    1ac0:	10 82       	st	Z, r1
    1ac2:	c9 01       	movw	r24, r18
    1ac4:	0c 94 64 0d 	jmp	0x1ac8	; 0x1ac8 <strrev>

00001ac8 <strrev>:
    1ac8:	dc 01       	movw	r26, r24
    1aca:	fc 01       	movw	r30, r24
    1acc:	67 2f       	mov	r22, r23
    1ace:	71 91       	ld	r23, Z+
    1ad0:	77 23       	and	r23, r23
    1ad2:	e1 f7       	brne	.-8      	; 0x1acc <strrev+0x4>
    1ad4:	32 97       	sbiw	r30, 0x02	; 2
    1ad6:	04 c0       	rjmp	.+8      	; 0x1ae0 <strrev+0x18>
    1ad8:	7c 91       	ld	r23, X
    1ada:	6d 93       	st	X+, r22
    1adc:	70 83       	st	Z, r23
    1ade:	62 91       	ld	r22, -Z
    1ae0:	ae 17       	cp	r26, r30
    1ae2:	bf 07       	cpc	r27, r31
    1ae4:	c8 f3       	brcs	.-14     	; 0x1ad8 <strrev+0x10>
    1ae6:	08 95       	ret

00001ae8 <__udivmodhi4>:
    1ae8:	aa 1b       	sub	r26, r26
    1aea:	bb 1b       	sub	r27, r27
    1aec:	51 e1       	ldi	r21, 0x11	; 17
    1aee:	07 c0       	rjmp	.+14     	; 0x1afe <__udivmodhi4_ep>

00001af0 <__udivmodhi4_loop>:
    1af0:	aa 1f       	adc	r26, r26
    1af2:	bb 1f       	adc	r27, r27
    1af4:	a6 17       	cp	r26, r22
    1af6:	b7 07       	cpc	r27, r23
    1af8:	10 f0       	brcs	.+4      	; 0x1afe <__udivmodhi4_ep>
    1afa:	a6 1b       	sub	r26, r22
    1afc:	b7 0b       	sbc	r27, r23

00001afe <__udivmodhi4_ep>:
    1afe:	88 1f       	adc	r24, r24
    1b00:	99 1f       	adc	r25, r25
    1b02:	5a 95       	dec	r21
    1b04:	a9 f7       	brne	.-22     	; 0x1af0 <__udivmodhi4_loop>
    1b06:	80 95       	com	r24
    1b08:	90 95       	com	r25
    1b0a:	bc 01       	movw	r22, r24
    1b0c:	cd 01       	movw	r24, r26
    1b0e:	08 95       	ret

00001b10 <_exit>:
    1b10:	f8 94       	cli

00001b12 <__stop_program>:
    1b12:	ff cf       	rjmp	.-2      	; 0x1b12 <__stop_program>
